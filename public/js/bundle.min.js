!function(){return function e(t,r,o){function n(s,a){if(!r[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(i)return i(s,!0);var c=new Error("Cannot find module '"+s+"'");throw c.code="MODULE_NOT_FOUND",c}var u=r[s]={exports:{}};t[s][0].call(u.exports,function(e){var r=t[s][1][e];return n(r||e)},u,u.exports,e,t,r,o)}return r[s].exports}for(var i="function"==typeof require&&require,s=0;s<o.length;s++)n(o[s]);return n}}()({1:[function(e,t,r){(function(e){"use strict";r.PORT=e.env.PORT||8080,r.GOOGLE_MAPS_API_KEY=e.env.GOOGLE_MAPS_API_KEY,r.uluru={lat:40.669,lng:-75.155}}).call(this,e("_process"))},{_process:30}],2:[function(e,t,r){"use strict";var o=e("object-keys"),n=e("foreach"),i="function"==typeof Symbol&&"symbol"==typeof Symbol(),s=Object.prototype.toString,a=Object.defineProperty&&function(){var e={};try{for(var t in Object.defineProperty(e,"x",{enumerable:!1,value:e}),e)return!1;return e.x===e}catch(e){return!1}}(),l=function(e,t,r,o){var n;t in e&&("function"!=typeof(n=o)||"[object Function]"!==s.call(n)||!o())||(a?Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:r,writable:!0}):e[t]=r)},c=function(e,t){var r=arguments.length>2?arguments[2]:{},s=o(t);i&&(s=s.concat(Object.getOwnPropertySymbols(t))),n(s,function(o){l(e,o,t[o],r[o])})};c.supportsDescriptors=!!a,t.exports=c},{foreach:16,"object-keys":24}],3:[function(e,t,r){"use strict";var o=e("has"),n=e("es-to-primitive/es6"),i=Object.prototype.toString,s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,a=e("./helpers/isNaN"),l=e("./helpers/isFinite"),c=Number.MAX_SAFE_INTEGER||Math.pow(2,53)-1,u=e("./helpers/assign"),p=e("./helpers/sign"),f=e("./helpers/mod"),y=e("./helpers/isPrimitive"),h=parseInt,d=e("function-bind"),b=d.call(Function.call,Array.prototype.slice),m=d.call(Function.call,String.prototype.slice),g=d.call(Function.call,RegExp.prototype.test,/^0b[01]+$/i),v=d.call(Function.call,RegExp.prototype.test,/^0o[0-7]+$/i),w=d.call(Function.call,RegExp.prototype.exec),T=["","​","￾"].join(""),S=new RegExp("["+T+"]","g"),j=d.call(Function.call,RegExp.prototype.test,S),O=d.call(Function.call,RegExp.prototype.test,/^[-+]0x[0-9a-f]+$/i),E=["\t\n\v\f\r   ᠎    ","         　\u2028","\u2029\ufeff"].join(""),C=new RegExp("(^["+E+"]+)|(["+E+"]+$)","g"),$=d.call(Function.call,String.prototype.replace),x=e("./es5"),I=e("is-regex"),P=u(u({},x),{Call:function(e,t){var r=arguments.length>2?arguments[2]:[];if(!this.IsCallable(e))throw new TypeError(e+" is not a function");return e.apply(t,r)},ToPrimitive:n,ToNumber:function(e){var t=y(e)?e:n(e,Number);if("symbol"==typeof t)throw new TypeError("Cannot convert a Symbol value to a number");if("string"==typeof t){if(g(t))return this.ToNumber(h(m(t,2),2));if(v(t))return this.ToNumber(h(m(t,2),8));if(j(t)||O(t))return NaN;var r=$(t,C,"");if(r!==t)return this.ToNumber(r)}return Number(t)},ToInt16:function(e){var t=this.ToUint16(e);return t>=32768?t-65536:t},ToInt8:function(e){var t=this.ToUint8(e);return t>=128?t-256:t},ToUint8:function(e){var t=this.ToNumber(e);if(a(t)||0===t||!l(t))return 0;var r=p(t)*Math.floor(Math.abs(t));return f(r,256)},ToUint8Clamp:function(e){var t=this.ToNumber(e);if(a(t)||t<=0)return 0;if(t>=255)return 255;var r=Math.floor(e);return r+.5<t?r+1:t<r+.5?r:r%2!=0?r+1:r},ToString:function(e){if("symbol"==typeof e)throw new TypeError("Cannot convert a Symbol value to a string");return String(e)},ToObject:function(e){return this.RequireObjectCoercible(e),Object(e)},ToPropertyKey:function(e){var t=this.ToPrimitive(e,String);return"symbol"==typeof t?t:this.ToString(t)},ToLength:function(e){var t=this.ToInteger(e);return t<=0?0:t>c?c:t},CanonicalNumericIndexString:function(e){if("[object String]"!==i.call(e))throw new TypeError("must be a string");if("-0"===e)return-0;var t=this.ToNumber(e);return this.SameValue(this.ToString(t),e)?t:void 0},RequireObjectCoercible:x.CheckObjectCoercible,IsArray:Array.isArray||function(e){return"[object Array]"===i.call(e)},IsConstructor:function(e){return"function"==typeof e&&!!e.prototype},IsExtensible:function(e){return!Object.preventExtensions||!y(e)&&Object.isExtensible(e)},IsInteger:function(e){if("number"!=typeof e||a(e)||!l(e))return!1;var t=Math.abs(e);return Math.floor(t)===t},IsPropertyKey:function(e){return"string"==typeof e||"symbol"==typeof e},IsRegExp:function(e){if(!e||"object"!=typeof e)return!1;if(s){var t=e[Symbol.match];if(void 0!==t)return x.ToBoolean(t)}return I(e)},SameValueZero:function(e,t){return e===t||a(e)&&a(t)},GetV:function(e,t){if(!this.IsPropertyKey(t))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");return this.ToObject(e)[t]},GetMethod:function(e,t){if(!this.IsPropertyKey(t))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");var r=this.GetV(e,t);if(null!=r){if(!this.IsCallable(r))throw new TypeError(t+"is not a function");return r}},Get:function(e,t){if("Object"!==this.Type(e))throw new TypeError("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");return e[t]},Type:function(e){return"symbol"==typeof e?"Symbol":x.Type(e)},SpeciesConstructor:function(e,t){if("Object"!==this.Type(e))throw new TypeError("Assertion failed: Type(O) is not Object");var r=e.constructor;if(void 0===r)return t;if("Object"!==this.Type(r))throw new TypeError("O.constructor is not an Object");var o=s&&Symbol.species?r[Symbol.species]:void 0;if(null==o)return t;if(this.IsConstructor(o))return o;throw new TypeError("no constructor found")},CompletePropertyDescriptor:function(e){if(!this.IsPropertyDescriptor(e))throw new TypeError("Desc must be a Property Descriptor");return this.IsGenericDescriptor(e)||this.IsDataDescriptor(e)?(o(e,"[[Value]]")||(e["[[Value]]"]=void 0),o(e,"[[Writable]]")||(e["[[Writable]]"]=!1)):(o(e,"[[Get]]")||(e["[[Get]]"]=void 0),o(e,"[[Set]]")||(e["[[Set]]"]=void 0)),o(e,"[[Enumerable]]")||(e["[[Enumerable]]"]=!1),o(e,"[[Configurable]]")||(e["[[Configurable]]"]=!1),e},Set:function(e,t,r,o){if("Object"!==this.Type(e))throw new TypeError("O must be an Object");if(!this.IsPropertyKey(t))throw new TypeError("P must be a Property Key");if("Boolean"!==this.Type(o))throw new TypeError("Throw must be a Boolean");if(o)return e[t]=r,!0;try{e[t]=r}catch(e){return!1}},HasOwnProperty:function(e,t){if("Object"!==this.Type(e))throw new TypeError("O must be an Object");if(!this.IsPropertyKey(t))throw new TypeError("P must be a Property Key");return o(e,t)},HasProperty:function(e,t){if("Object"!==this.Type(e))throw new TypeError("O must be an Object");if(!this.IsPropertyKey(t))throw new TypeError("P must be a Property Key");return t in e},IsConcatSpreadable:function(e){if("Object"!==this.Type(e))return!1;if(s&&"symbol"==typeof Symbol.isConcatSpreadable){var t=this.Get(e,Symbol.isConcatSpreadable);if(void 0!==t)return this.ToBoolean(t)}return this.IsArray(e)},Invoke:function(e,t){if(!this.IsPropertyKey(t))throw new TypeError("P must be a Property Key");var r=b(arguments,2),o=this.GetV(e,t);return this.Call(o,e,r)},CreateIterResultObject:function(e,t){if("Boolean"!==this.Type(t))throw new TypeError("Assertion failed: Type(done) is not Boolean");return{value:e,done:t}},RegExpExec:function(e,t){if("Object"!==this.Type(e))throw new TypeError("R must be an Object");if("String"!==this.Type(t))throw new TypeError("S must be a String");var r=this.Get(e,"exec");if(this.IsCallable(r)){var o=this.Call(r,e,[t]);if(null===o||"Object"===this.Type(o))return o;throw new TypeError('"exec" method must return `null` or an Object')}return w(e,t)},ArraySpeciesCreate:function(e,t){if(!this.IsInteger(t)||t<0)throw new TypeError("Assertion failed: length must be an integer >= 0");var r,o=0===t?0:t;if(this.IsArray(e)&&(r=this.Get(e,"constructor"),"Object"===this.Type(r)&&s&&Symbol.species&&null===(r=this.Get(r,Symbol.species))&&(r=void 0)),void 0===r)return Array(o);if(!this.IsConstructor(r))throw new TypeError("C must be a constructor");return new r(o)},CreateDataProperty:function(e,t,r){if("Object"!==this.Type(e))throw new TypeError("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");var o=Object.getOwnPropertyDescriptor(e,t),n=o||"function"!=typeof Object.isExtensible||Object.isExtensible(e);if(o&&(!o.writable||!o.configurable)||!n)return!1;var i={configurable:!0,enumerable:!0,value:r,writable:!0};return Object.defineProperty(e,t,i),!0},CreateDataPropertyOrThrow:function(e,t,r){if("Object"!==this.Type(e))throw new TypeError("Assertion failed: Type(O) is not Object");if(!this.IsPropertyKey(t))throw new TypeError("Assertion failed: IsPropertyKey(P) is not true");var o=this.CreateDataProperty(e,t,r);if(!o)throw new TypeError("unable to create data property");return o},AdvanceStringIndex:function(e,t,r){if("String"!==this.Type(e))throw new TypeError("Assertion failed: Type(S) is not String");if(!this.IsInteger(t))throw new TypeError("Assertion failed: length must be an integer >= 0 and <= (2**53 - 1)");if(t<0||t>c)throw new RangeError("Assertion failed: length must be an integer >= 0 and <= (2**53 - 1)");if("Boolean"!==this.Type(r))throw new TypeError("Assertion failed: Type(unicode) is not Boolean");if(!r)return t+1;if(t+1>=e.length)return t+1;var o=e.charCodeAt(t);if(o<55296||o>56319)return t+1;var n=e.charCodeAt(t+1);return n<56320||n>57343?t+1:t+2}});delete P.CheckObjectCoercible,t.exports=P},{"./es5":5,"./helpers/assign":7,"./helpers/isFinite":8,"./helpers/isNaN":9,"./helpers/isPrimitive":10,"./helpers/mod":11,"./helpers/sign":12,"es-to-primitive/es6":14,"function-bind":18,has:19,"is-regex":22}],4:[function(e,t,r){"use strict";var o=e("./es2015"),n=e("./helpers/assign"),i=n(n({},o),{SameValueNonNumber:function(e,t){if("number"==typeof e||typeof e!=typeof t)throw new TypeError("SameValueNonNumber requires two non-number values of the same type.");return this.SameValue(e,t)}});t.exports=i},{"./es2015":3,"./helpers/assign":7}],5:[function(e,t,r){"use strict";var o=e("./helpers/isNaN"),n=e("./helpers/isFinite"),i=e("./helpers/sign"),s=e("./helpers/mod"),a=e("is-callable"),l=e("es-to-primitive/es5"),c=e("has"),u={ToPrimitive:l,ToBoolean:function(e){return!!e},ToNumber:function(e){return Number(e)},ToInteger:function(e){var t=this.ToNumber(e);return o(t)?0:0!==t&&n(t)?i(t)*Math.floor(Math.abs(t)):t},ToInt32:function(e){return this.ToNumber(e)>>0},ToUint32:function(e){return this.ToNumber(e)>>>0},ToUint16:function(e){var t=this.ToNumber(e);if(o(t)||0===t||!n(t))return 0;var r=i(t)*Math.floor(Math.abs(t));return s(r,65536)},ToString:function(e){return String(e)},ToObject:function(e){return this.CheckObjectCoercible(e),Object(e)},CheckObjectCoercible:function(e,t){if(null==e)throw new TypeError(t||"Cannot call method on "+e);return e},IsCallable:a,SameValue:function(e,t){return e===t?0!==e||1/e==1/t:o(e)&&o(t)},Type:function(e){return null===e?"Null":void 0===e?"Undefined":"function"==typeof e||"object"==typeof e?"Object":"number"==typeof e?"Number":"boolean"==typeof e?"Boolean":"string"==typeof e?"String":void 0},IsPropertyDescriptor:function(e){if("Object"!==this.Type(e))return!1;var t={"[[Configurable]]":!0,"[[Enumerable]]":!0,"[[Get]]":!0,"[[Set]]":!0,"[[Value]]":!0,"[[Writable]]":!0};for(var r in e)if(c(e,r)&&!t[r])return!1;var o=c(e,"[[Value]]"),n=c(e,"[[Get]]")||c(e,"[[Set]]");if(o&&n)throw new TypeError("Property Descriptors may not be both accessor and data descriptors");return!0},IsAccessorDescriptor:function(e){if(void 0===e)return!1;if(!this.IsPropertyDescriptor(e))throw new TypeError("Desc must be a Property Descriptor");return!(!c(e,"[[Get]]")&&!c(e,"[[Set]]"))},IsDataDescriptor:function(e){if(void 0===e)return!1;if(!this.IsPropertyDescriptor(e))throw new TypeError("Desc must be a Property Descriptor");return!(!c(e,"[[Value]]")&&!c(e,"[[Writable]]"))},IsGenericDescriptor:function(e){if(void 0===e)return!1;if(!this.IsPropertyDescriptor(e))throw new TypeError("Desc must be a Property Descriptor");return!this.IsAccessorDescriptor(e)&&!this.IsDataDescriptor(e)},FromPropertyDescriptor:function(e){if(void 0===e)return e;if(!this.IsPropertyDescriptor(e))throw new TypeError("Desc must be a Property Descriptor");if(this.IsDataDescriptor(e))return{value:e["[[Value]]"],writable:!!e["[[Writable]]"],enumerable:!!e["[[Enumerable]]"],configurable:!!e["[[Configurable]]"]};if(this.IsAccessorDescriptor(e))return{get:e["[[Get]]"],set:e["[[Set]]"],enumerable:!!e["[[Enumerable]]"],configurable:!!e["[[Configurable]]"]};throw new TypeError("FromPropertyDescriptor must be called with a fully populated Property Descriptor")},ToPropertyDescriptor:function(e){if("Object"!==this.Type(e))throw new TypeError("ToPropertyDescriptor requires an object");var t={};if(c(e,"enumerable")&&(t["[[Enumerable]]"]=this.ToBoolean(e.enumerable)),c(e,"configurable")&&(t["[[Configurable]]"]=this.ToBoolean(e.configurable)),c(e,"value")&&(t["[[Value]]"]=e.value),c(e,"writable")&&(t["[[Writable]]"]=this.ToBoolean(e.writable)),c(e,"get")){var r=e.get;if(void 0!==r&&!this.IsCallable(r))throw new TypeError("getter must be a function");t["[[Get]]"]=r}if(c(e,"set")){var o=e.set;if(void 0!==o&&!this.IsCallable(o))throw new TypeError("setter must be a function");t["[[Set]]"]=o}if((c(t,"[[Get]]")||c(t,"[[Set]]"))&&(c(t,"[[Value]]")||c(t,"[[Writable]]")))throw new TypeError("Invalid property descriptor. Cannot both specify accessors and a value or writable attribute");return t}};t.exports=u},{"./helpers/isFinite":8,"./helpers/isNaN":9,"./helpers/mod":11,"./helpers/sign":12,"es-to-primitive/es5":13,has:19,"is-callable":20}],6:[function(e,t,r){"use strict";t.exports=e("./es2016")},{"./es2016":4}],7:[function(e,t,r){var o=Object.prototype.hasOwnProperty;t.exports=function(e,t){if(Object.assign)return Object.assign(e,t);for(var r in t)o.call(t,r)&&(e[r]=t[r]);return e}},{}],8:[function(e,t,r){var o=Number.isNaN||function(e){return e!=e};t.exports=Number.isFinite||function(e){return"number"==typeof e&&!o(e)&&e!==1/0&&e!==-1/0}},{}],9:[function(e,t,r){t.exports=Number.isNaN||function(e){return e!=e}},{}],10:[function(e,t,r){t.exports=function(e){return null===e||"function"!=typeof e&&"object"!=typeof e}},{}],11:[function(e,t,r){t.exports=function(e,t){var r=e%t;return Math.floor(r>=0?r:r+t)}},{}],12:[function(e,t,r){t.exports=function(e){return e>=0?1:-1}},{}],13:[function(e,t,r){"use strict";var o=Object.prototype.toString,n=e("./helpers/isPrimitive"),i=e("is-callable"),s=function(e,t){var r=t||("[object Date]"===o.call(e)?String:Number);if(r===String||r===Number){var s,a,l=r===String?["toString","valueOf"]:["valueOf","toString"];for(a=0;a<l.length;++a)if(i(e[l[a]])&&(s=e[l[a]](),n(s)))return s;throw new TypeError("No default value")}throw new TypeError("invalid [[DefaultValue]] hint supplied")};t.exports=function(e,t){return n(e)?e:s(e,t)}},{"./helpers/isPrimitive":15,"is-callable":20}],14:[function(e,t,r){"use strict";var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator,n=e("./helpers/isPrimitive"),i=e("is-callable"),s=e("is-date-object"),a=e("is-symbol");t.exports=function(e,t){if(n(e))return e;var r,l="default";if(arguments.length>1&&(t===String?l="string":t===Number&&(l="number")),o&&(Symbol.toPrimitive?r=function(e,t){var r=e[t];if(null!=r){if(!i(r))throw new TypeError(r+" returned for property "+t+" of object "+e+" is not a function");return r}}(e,Symbol.toPrimitive):a(e)&&(r=Symbol.prototype.valueOf)),void 0!==r){var c=r.call(e,l);if(n(c))return c;throw new TypeError("unable to convert exotic object to primitive")}return"default"===l&&(s(e)||a(e))&&(l="string"),function(e,t){if(null==e)throw new TypeError("Cannot call method on "+e);if("string"!=typeof t||"number"!==t&&"string"!==t)throw new TypeError('hint must be "string" or "number"');var r,o,s,a="string"===t?["toString","valueOf"]:["valueOf","toString"];for(s=0;s<a.length;++s)if(r=e[a[s]],i(r)&&(o=r.call(e),n(o)))return o;throw new TypeError("No default value")}(e,"default"===l?"number":l)}},{"./helpers/isPrimitive":15,"is-callable":20,"is-date-object":21,"is-symbol":23}],15:[function(e,t,r){arguments[4][10][0].apply(r,arguments)},{dup:10}],16:[function(e,t,r){var o=Object.prototype.hasOwnProperty,n=Object.prototype.toString;t.exports=function(e,t,r){if("[object Function]"!==n.call(t))throw new TypeError("iterator must be a function");var i=e.length;if(i===+i)for(var s=0;s<i;s++)t.call(r,e[s],s,e);else for(var a in e)o.call(e,a)&&t.call(r,e[a],a,e)}},{}],17:[function(e,t,r){"use strict";var o=Array.prototype.slice,n=Object.prototype.toString;t.exports=function(e){var t=this;if("function"!=typeof t||"[object Function]"!==n.call(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var r,i=o.call(arguments,1),s=Math.max(0,t.length-i.length),a=[],l=0;l<s;l++)a.push("$"+l);if(r=Function("binder","return function ("+a.join(",")+"){ return binder.apply(this,arguments); }")(function(){if(this instanceof r){var n=t.apply(this,i.concat(o.call(arguments)));return Object(n)===n?n:this}return t.apply(e,i.concat(o.call(arguments)))}),t.prototype){var c=function(){};c.prototype=t.prototype,r.prototype=new c,c.prototype=null}return r}},{}],18:[function(e,t,r){"use strict";var o=e("./implementation");t.exports=Function.prototype.bind||o},{"./implementation":17}],19:[function(e,t,r){var o=e("function-bind");t.exports=o.call(Function.call,Object.prototype.hasOwnProperty)},{"function-bind":18}],20:[function(e,t,r){"use strict";var o=Function.prototype.toString,n=/^\s*class /,i=function(e){try{var t=o.call(e).replace(/\/\/.*\n/g,"").replace(/\/\*[.\s\S]*\*\//g,"").replace(/\n/gm," ").replace(/ {2}/g," ");return n.test(t)}catch(e){return!1}},s=Object.prototype.toString,a="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(e){if(!e)return!1;if("function"!=typeof e&&"object"!=typeof e)return!1;if(a)return function(e){try{return!i(e)&&(o.call(e),!0)}catch(e){return!1}}(e);if(i(e))return!1;var t=s.call(e);return"[object Function]"===t||"[object GeneratorFunction]"===t}},{}],21:[function(e,t,r){"use strict";var o=Date.prototype.getDay,n=Object.prototype.toString,i="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(e){return"object"==typeof e&&null!==e&&(i?function(e){try{return o.call(e),!0}catch(e){return!1}}(e):"[object Date]"===n.call(e))}},{}],22:[function(e,t,r){"use strict";var o=e("has"),n=RegExp.prototype.exec,i=Object.getOwnPropertyDescriptor,s=Object.prototype.toString,a="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;t.exports=function(e){if(!e||"object"!=typeof e)return!1;if(!a)return"[object RegExp]"===s.call(e);var t=i(e,"lastIndex");return!(!t||!o(t,"value"))&&function(e){try{var t=e.lastIndex;return e.lastIndex=0,n.call(e),!0}catch(e){return!1}finally{e.lastIndex=t}}(e)}},{has:19}],23:[function(e,t,r){"use strict";var o=Object.prototype.toString;if("function"==typeof Symbol&&"symbol"==typeof Symbol()){var n=Symbol.prototype.toString,i=/^Symbol\(.*\)$/;t.exports=function(e){if("symbol"==typeof e)return!0;if("[object Symbol]"!==o.call(e))return!1;try{return"symbol"==typeof(t=e).valueOf()&&i.test(n.call(t))}catch(e){return!1}var t}}else t.exports=function(e){return!1}},{}],24:[function(e,t,r){"use strict";var o=Object.prototype.hasOwnProperty,n=Object.prototype.toString,i=Array.prototype.slice,s=e("./isArguments"),a=Object.prototype.propertyIsEnumerable,l=!a.call({toString:null},"toString"),c=a.call(function(){},"prototype"),u=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],p=function(e){var t=e.constructor;return t&&t.prototype===e},f={$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},y=function(){if("undefined"==typeof window)return!1;for(var e in window)try{if(!f["$"+e]&&o.call(window,e)&&null!==window[e]&&"object"==typeof window[e])try{p(window[e])}catch(e){return!0}}catch(e){return!0}return!1}(),h=function(e){var t=null!==e&&"object"==typeof e,r="[object Function]"===n.call(e),i=s(e),a=t&&"[object String]"===n.call(e),f=[];if(!t&&!r&&!i)throw new TypeError("Object.keys called on a non-object");var h=c&&r;if(a&&e.length>0&&!o.call(e,0))for(var d=0;d<e.length;++d)f.push(String(d));if(i&&e.length>0)for(var b=0;b<e.length;++b)f.push(String(b));else for(var m in e)h&&"prototype"===m||!o.call(e,m)||f.push(String(m));if(l)for(var g=function(e){if("undefined"==typeof window||!y)return p(e);try{return p(e)}catch(e){return!1}}(e),v=0;v<u.length;++v)g&&"constructor"===u[v]||!o.call(e,u[v])||f.push(u[v]);return f};h.shim=function(){if(Object.keys){if(!function(){return 2===(Object.keys(arguments)||"").length}(1,2)){var e=Object.keys;Object.keys=function(t){return s(t)?e(i.call(t)):e(t)}}}else Object.keys=h;return Object.keys||h},t.exports=h},{"./isArguments":25}],25:[function(e,t,r){"use strict";var o=Object.prototype.toString;t.exports=function(e){var t=o.call(e),r="[object Arguments]"===t;return r||(r="[object Array]"!==t&&null!==e&&"object"==typeof e&&"number"==typeof e.length&&e.length>=0&&"[object Function]"===o.call(e.callee)),r}},{}],26:[function(e,t,r){"use strict";var o=e("es-abstract/es7"),n=e("has"),i=e("function-bind").call(Function.call,Object.prototype.propertyIsEnumerable);t.exports=function(e){var t=o.RequireObjectCoercible(e),r=[];for(var s in t)n(t,s)&&i(t,s)&&r.push(t[s]);return r}},{"es-abstract/es7":6,"function-bind":18,has:19}],27:[function(e,t,r){"use strict";var o=e("define-properties"),n=e("./implementation"),i=e("./polyfill"),s=e("./shim"),a=i();o(a,{getPolyfill:i,implementation:n,shim:s}),t.exports=a},{"./implementation":26,"./polyfill":28,"./shim":29,"define-properties":2}],28:[function(e,t,r){"use strict";var o=e("./implementation");t.exports=function(){return"function"==typeof Object.values?Object.values:o}},{"./implementation":26}],29:[function(e,t,r){"use strict";var o=e("./polyfill"),n=e("define-properties");t.exports=function(){var e=o();return n(Object,{values:e},{values:function(){return Object.values!==e}}),e}},{"./polyfill":28,"define-properties":2}],30:[function(e,t,r){var o,n,i=t.exports={};function s(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function l(e){if(o===setTimeout)return setTimeout(e,0);if((o===s||!o)&&setTimeout)return o=setTimeout,setTimeout(e,0);try{return o(e,0)}catch(t){try{return o.call(null,e,0)}catch(t){return o.call(this,e,0)}}}!function(){try{o="function"==typeof setTimeout?setTimeout:s}catch(e){o=s}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var c,u=[],p=!1,f=-1;function y(){p&&c&&(p=!1,c.length?u=c.concat(u):f=-1,u.length&&h())}function h(){if(!p){var e=l(y);p=!0;for(var t=u.length;t;){for(c=u,u=[];++f<t;)c&&c[f].run();f=-1,t=u.length}c=null,p=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function b(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];u.push(new d(e,t)),1!==u.length||p||l(h)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=b,i.addListener=b,i.once=b,i.off=b,i.removeListener=b,i.removeAllListeners=b,i.emit=b,i.prependListener=b,i.prependOnceListener=b,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},{}],31:[function(e,t,r){String.prototype.includes||function(){"use strict";var e={}.toString,t=function(){try{var e={},t=Object.defineProperty,r=t(e,e,e)&&t}catch(e){}return r}(),r="".indexOf,o=function(t){if(null==this)throw TypeError();var o=String(this);if(t&&"[object RegExp]"==e.call(t))throw TypeError();var n=o.length,i=String(t),s=i.length,a=arguments.length>1?arguments[1]:void 0,l=a?Number(a):0;return l!=l&&(l=0),!(s+Math.min(Math.max(l,0),n)>n)&&-1!=r.call(o,i,l)};t?t(String.prototype,"includes",{value:o,configurable:!0,writable:!0}):String.prototype.includes=o}()},{}],32:[function(e,t,r){String.prototype.startsWith||function(){"use strict";var e=function(){try{var e={},t=Object.defineProperty,r=t(e,e,e)&&t}catch(e){}return r}(),t={}.toString,r=function(e){if(null==this)throw TypeError();var r=String(this);if(e&&"[object RegExp]"==t.call(e))throw TypeError();var o=r.length,n=String(e),i=n.length,s=arguments.length>1?arguments[1]:void 0,a=s?Number(s):0;a!=a&&(a=0);var l=Math.min(Math.max(a,0),o);if(i+l>o)return!1;for(var c=-1;++c<i;)if(r.charCodeAt(l+c)!=n.charCodeAt(c))return!1;return!0};e?e(String.prototype,"startsWith",{value:r,configurable:!0,writable:!0}):String.prototype.startsWith=r}()},{}],33:[function(e,t,r){"use strict";var o={isMobile:!1,hasTouch:!1,projects:[]},n=e("./selectors"),i=n.MAIN_NAV,s=n.MENU_LIST,a=(n.BANNER,n.LOGO_WRAP,n.RESULTS_CONTAINER),l=n.SEARCH_RESULTS,c=n.SEARCH_ICON,u=n.CLEAR_ICON,p=e("object.values"),f=e("./utils").findMatches;function y(){p(arguments).forEach(function(e){$(e).addClass("hidden")})}function h(){p(arguments).forEach(function(e){$(e).removeClass("hidden")})}function d(){$(a).add(l).removeClass("open"),$(a).height(""),$(l).html("")}function b(){h(c),y(u)}function m(e){if(""===(e=e.toLowerCase().trim()))return d(),void b();y(c),h(u);var t=o.projects,r=window.location.pathname,n=void 0;if("/projects"===r)n="all";else{n=r.slice("/projects/categories/".length)}var i=f(t,"name",e).map(function(e){return'\n                        <li>\n                            <a href="/projects/'+e.name.replace(/ /g,"-")+"?category="+n+'">'+e.name+"</a>\n                        </li>\n                    "});$(a).add(l).addClass("open"),$(".category-btn").removeClass("open"),$(".category-options").addClass("fadeOut");var s=i.length;if(s>0)return $(l).html(i.join("")),void $(a).css({height:36*s+45+"px"});$(a).css({height:""}),$(l).html('<p class="no-match-msg">Sorry, no matches found.</p>')}var g=e("./utils"),v=g.fixBanner,w=(g.expandNav,g.shrinkNav,g.toggleHeaderBgImg),T=g.setBgImgHeight,S=g.fadeOutLoadScreen,j=g.highlightProjectCard;function O(){var e=window.innerWidth;o.isMobile=e<=414,o.hasTouch&&T(),e<1060&&$("header").css("z-index",""),e>=1060&&$("html").removeClass("no-scroll"),v()}function E(){$(".burger-btn").on("click",function(e){e.preventDefault(),$(".burger-btn, .burger-icon, "+i+", "+s).toggleClass("open"),$("html").hasClass("no-scroll")?$("html, body").removeClass("no-scroll"):setTimeout(function(){$("html, body").addClass("no-scroll")},200)})}function C(){$(".category-form").on("submit",function(e){e.preventDefault()}),$(".category-btn").on("click",function(e){e.preventDefault(),$(".category-options").removeClass("fadeOut"),$(a).height(""),$(l).hasClass("open")?($(l).removeClass("open"),$(".form-results-container, .category-btn").addClass("open")):$(".form-results-container, .category-btn").toggleClass("open")}),$(".search-bar").on("input",function(e){e.preventDefault(),m(e.target.value)}),$(u).on("click",function(e){e.preventDefault(),d(),b(),$(".search-bar").val("").focus()})}function x(){$(".back-btn-anchor").on("click",function(e){e.preventDefault();var t=$(this).data("category");location.href="/projects/"+t})}var I=e("./slideshow").startSlideShow,P=e("./google-maps").initMap;function N(){O(),$(window).resize(O),$(window).scroll(function(e){var t=location.pathname;"/"===t?(w(),v()):t.includes("/projects/")&&j()}),$("html").hasClass("touch")&&(o.hasTouch=!0,T()),e("string.prototype.includes"),e("string.prototype.startswith")}function A(){var e=location.pathname;"/"===e?(w(),v()):"/contact-us"===e&&P(),S(),I(4e3),$.ajax({url:"/api/projects/all",type:"GET",dataType:"json",success:function(e){o.projects=e.projects,console.log(o.projects)},error:function(e,t,r){console.log(r)}})}var k=e("./slick-init"),D=k.displayProjectSlider,R=k.displayModelSlider,M=k.responsiveReslick;0!==$("#projects").length?(D(),M()):0!==$(".bim-model-page").length&&(R(),M()),$(function(){N(),E(),C(),x(),A()})},{"./google-maps":34,"./selectors":35,"./slick-init":36,"./slideshow":37,"./utils":38,"object.values":27,"string.prototype.includes":31,"string.prototype.startswith":32}],34:[function(e,t,r){"use strict";var o=e("../../../config"),n=o.uluru;o.GOOGLE_MAPS_API_KEY;r.initMap=function(){var e,t=new google.maps.Map(document.getElementById("map"),{zoom:16,center:n,styles:i}),r=new MarkerWithLabel({position:n,map:t,labelContent:"Backbrook Masonry Headquarters",labelAnchor:new google.maps.Point(-30,10),labelClass:"google-maps-bbm-marker",labelInBackground:!0,icon:{color:"red",url:"assets/images/compressed/five-bricks.png"}});google.maps.event.addDomListener(t,"idle",function(){e=t.getCenter()}),google.maps.event.addDomListener(window,"resize",function(){t.setCenter(e)});var o=new google.maps.InfoWindow;google.maps.event.addDomListener(r,"click",function(){o.setContent("<div>Backbrook Masonry Headquarters</div>"),o.open(t,this)})};var i=[{elementType:"geometry",stylers:[{color:"#ebe3cd"}]},{elementType:"labels.text.fill",stylers:[{color:"#523735"}]},{elementType:"labels.text.stroke",stylers:[{color:"#f5f1e6"}]},{featureType:"administrative",elementType:"geometry.stroke",stylers:[{color:"#c9b2a6"}]},{featureType:"administrative.land_parcel",elementType:"geometry.stroke",stylers:[{color:"#dcd2be"}]},{featureType:"administrative.land_parcel",elementType:"labels.text.fill",stylers:[{color:"#ae9e90"}]},{featureType:"landscape.natural",elementType:"geometry",stylers:[{color:"#dfd2ae"}]},{featureType:"poi",elementType:"geometry",stylers:[{color:"#dfd2ae"}]},{featureType:"poi",elementType:"labels.text.fill",stylers:[{color:"#93817c"}]},{featureType:"poi.park",elementType:"geometry.fill",stylers:[{color:"#a5b076"}]},{featureType:"poi.park",elementType:"labels.text.fill",stylers:[{color:"#447530"}]},{featureType:"road",elementType:"geometry",stylers:[{color:"#f5f1e6"}]},{featureType:"road.arterial",elementType:"geometry",stylers:[{color:"#fdfcf8"}]},{featureType:"road.highway",elementType:"geometry",stylers:[{color:"#f8c967"}]},{featureType:"road.highway",elementType:"geometry.stroke",stylers:[{color:"#e9bc62"}]},{featureType:"road.highway.controlled_access",elementType:"geometry",stylers:[{color:"#e98d58"}]},{featureType:"road.highway.controlled_access",elementType:"geometry.stroke",stylers:[{color:"#db8555"}]},{featureType:"road.local",elementType:"labels.text.fill",stylers:[{color:"#806b63"}]},{featureType:"transit.line",elementType:"geometry",stylers:[{color:"#dfd2ae"}]},{featureType:"transit.line",elementType:"labels.text.fill",stylers:[{color:"#8f7d77"}]},{featureType:"transit.line",elementType:"labels.text.stroke",stylers:[{color:"#ebe3cd"}]},{featureType:"transit.station",elementType:"geometry",stylers:[{color:"#dfd2ae"}]},{featureType:"water",elementType:"geometry.fill",stylers:[{color:"#b9d3c2"}]},{featureType:"water",elementType:"labels.text.fill",stylers:[{color:"#92998d"}]}]},{"../../../config":1}],35:[function(e,t,r){"use strict";t.exports={MAIN_NAV:".main-nav",MENU_LIST:".menu-list",BANNER:".banner",LOGO_WRAP:".logo-a-wrap",TROWEL_ICON:".icon-trowel-outline",RESULTS_CONTAINER:".form-results-container",SEARCH_RESULTS:".search-results",SEARCH_ICON:".icon-search-icon",CLEAR_ICON:".icon-clear-icon"}},{}],36:[function(e,t,r){"use strict";var o=".project-slider",n=".model-slider",i=function(){$(o).slick({dots:!1,arrows:!0,nextArrow:'<svg class="icon icon-chevron-right"><use xlink:href="#icon-chevron-right"></use></svg>',prevArrow:'<svg class="icon icon-chevron-left"><use xlink:href="#icon-chevron-left"></use></svg>',infinite:!1,speed:1200,slidesToShow:1,slidesToScroll:1,variableWidth:!0,responsive:[{breakpoint:515,settings:{speed:1200,arrows:!1,slidesToShow:1,slidesToScroll:1}}]});var e=sessionStorage.getItem("visited");e&&$(".icon-swipe-icon").remove(),$(o).on("afterChange",function(t,r,o){$(".icon-swipe-icon").addClass("fadeOut"),e||sessionStorage.setItem("visited","true")})},s=e("./utils").getScrollbarWidth(),a=function(){$(n).slick({dots:!0,arrows:!0,nextArrow:'<svg class="icon icon-chevron-right"><use xlink:href="#icon-chevron-right"></use></svg>',prevArrow:'<svg class="icon icon-chevron-left"><use xlink:href="#icon-chevron-left"></use></svg>',infinite:!1,speed:1200,variableWidth:!0,centerMode:!0,initialSlide:1,responsive:[{breakpoint:1200,settings:{initialSlide:0}},{breakpoint:737,settings:{speed:1200,arrows:!1,slidesToShow:1,slidesToScroll:1}}]}),window.innerWidth<737&&$(".model-slide").css({width:"calc(100vw - "+s+"px)"})};t.exports={initProjectSlider:i,initModelSlider:a,displayProjectSlider:function(){$(o).css("height","0px"),i(),$(o).css("height","")},displayModelSlider:function(){$(n).css("height","0px"),a(),$(n).css("height","")},unslick:function(e){$(e).hasClass("slick-initialized")&&$(e).slick("unslick")},responsiveReslick:function(){$(window).resize(function(){parseInt($("body").css("width")),$(o).hasClass("slick-initialized")||i(),$(n).hasClass("slick-initialized")||a(),window.innerWidth<737&&$(".model-slide").css({width:"calc(100vw - "+s+"px)"})})}}},{"./utils":38}],37:[function(e,t,r){"use strict";function o(){var e=$(".slide.current"),t=parseInt(e.attr("data-slide-num")),r=t<$(".slide").length?t+1:1;e.removeClass("current"),$('.slide[data-slide-num="'+r+'"]').addClass("current")}t.exports={nextSlide:o,startSlideShow:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:6e3;setInterval(function(){o()},e)}}},{}],38:[function(e,t,r){"use strict";var o=e("./selectors"),n=o.MAIN_NAV,i=o.MENU_LIST,s=o.BANNER,a=o.LOGO_WRAP,l=(o.TROWEL_ICON,function(){$(n).add(s).add(i).add("header").add(a).addClass("shrink")}),c=function(){$(n).add(s).add(i).add("header").add(a).removeClass("shrink")};t.exports={shrinkNav:l,expandNav:c,fixBanner:function(){var e=$(window).scrollTop();$(n).offset().top-e<=40?$(n).addClass("fixed"):$(n).removeClass("fixed");var t=$("header").height()-$(window).scrollTop();t<=0?l():t>0&&window.innerWidth<=899&&$("header").removeClass("shrink"),t>=100&&c()},toggleHeaderBgImg:function(){$(window).scrollTop()>2*$("header").height()?$("header").addClass("remove"):$("header").removeClass("remove")},setBgImgHeight:function(){var e=$("header");e.css("max-height","");var t=e.height();e.css("max-height",t)},fadeOutLoadScreen:function(){setTimeout(function(){$(".loading-page, .loading-page svg").addClass("fade-out"),setTimeout(function(){$("body").removeClass("no-scroll")},700),setTimeout(function(){$(".loading-page").remove()},2e3)},500)},findMatches:function(e,t,r){var o=[],n=!0,i=!1,s=void 0;try{for(var a,l=e[Symbol.iterator]();!(n=(a=l.next()).done);n=!0){var c=a.value,u=!1,p=c[t].toLowerCase().trim();if(p.startsWith(r)&&(console.log("current: ",p," starts with ",r),o.push(c),u=!0),!u)for(var f=p.split(" "),y=r.split(" "),h=0;h<y.length&&!u;h++)for(var d=0;d<f.length&&!u;d++)f[d].startsWith(y[h])&&(o.push(c),u=!0)}}catch(e){i=!0,s=e}finally{try{!n&&l.return&&l.return()}finally{if(i)throw s}}return o},highlightProjectCard:function(){window.innerWidth>=600?$(".project-card-anchor").removeClass("active"):$(".project-list li").each(function(e,t){var r=$(t).offset().top,o=(r+(r+$(t).outerHeight()))/2,n=$(window).scrollTop(),i=(n+(n+$(window).height()))/2,s=i-$(t).height()/2,a=i+$(t).height()/2;o>s&&o<a?($(".project-card-anchor").removeClass("active"),$(t).find(".project-card-anchor").addClass("active"),$(t).addClass("active")):($(t).find(".project-card-anchor").removeClass("active"),$(t).removeClass("active"))})},getScrollbarWidth:function(){var e=document.createElement("div");e.style.visibility="hidden",e.style.width="100px",e.style.msOverflowStyle="scrollbar",document.body.appendChild(e);var t=e.offsetWidth;e.style.overflow="scroll";var r=document.createElement("div");r.style.width="100%",e.appendChild(r);var o=r.offsetWidth;return e.parentNode.removeChild(e),t-o}}},{"./selectors":35}]},{},[33]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJjb25maWcvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZGVmaW5lLXByb3BlcnRpZXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvZXMyMDE1LmpzIiwibm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2VzMjAxNi5qcyIsIm5vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9lczUuanMiLCJub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvZXM3LmpzIiwibm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvYXNzaWduLmpzIiwibm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvaXNGaW5pdGUuanMiLCJub2RlX21vZHVsZXMvZXMtYWJzdHJhY3QvaGVscGVycy9pc05hTi5qcyIsIm5vZGVfbW9kdWxlcy9lcy1hYnN0cmFjdC9oZWxwZXJzL2lzUHJpbWl0aXZlLmpzIiwibm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvbW9kLmpzIiwibm9kZV9tb2R1bGVzL2VzLWFic3RyYWN0L2hlbHBlcnMvc2lnbi5qcyIsIm5vZGVfbW9kdWxlcy9lcy10by1wcmltaXRpdmUvZXM1LmpzIiwibm9kZV9tb2R1bGVzL2VzLXRvLXByaW1pdGl2ZS9lczYuanMiLCJub2RlX21vZHVsZXMvZm9yZWFjaC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9mdW5jdGlvbi1iaW5kL2ltcGxlbWVudGF0aW9uLmpzIiwibm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJub2RlX21vZHVsZXMvaGFzL3NyYy9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1jYWxsYWJsZS9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1kYXRlLW9iamVjdC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1yZWdleC9pbmRleC5qcyIsIm5vZGVfbW9kdWxlcy9pcy1zeW1ib2wvaW5kZXguanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaW5kZXguanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LWtleXMvaXNBcmd1bWVudHMuanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9pbXBsZW1lbnRhdGlvbi5qcyIsIm5vZGVfbW9kdWxlcy9vYmplY3QudmFsdWVzL2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL29iamVjdC52YWx1ZXMvcG9seWZpbGwuanMiLCJub2RlX21vZHVsZXMvb2JqZWN0LnZhbHVlcy9zaGltLmpzIiwibm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy9zdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzL2luY2x1ZGVzLmpzIiwibm9kZV9tb2R1bGVzL3N0cmluZy5wcm90b3R5cGUuc3RhcnRzd2l0aC9zdGFydHN3aXRoLmpzIiwic3JjL2J1aWxkL2pzL2FwcC5qcyIsInNyYy9idWlsZC9qcy9nb29nbGUtbWFwcy5qcyIsInNyYy9idWlsZC9qcy9zZWxlY3RvcnMuanMiLCJzcmMvYnVpbGQvanMvc2xpY2staW5pdC5qcyIsInNyYy9idWlsZC9qcy9zbGlkZXNob3cuanMiLCJzcmMvYnVpbGQvanMvdXRpbHMuanMiXSwibmFtZXMiOlsiZSIsInQiLCJuIiwiciIsInMiLCJvIiwidSIsImEiLCJyZXF1aXJlIiwiaSIsImYiLCJFcnJvciIsImNvZGUiLCJsIiwiZXhwb3J0cyIsImNhbGwiLCJsZW5ndGgiLCIxIiwibW9kdWxlIiwiUE9SVCIsInByb2Nlc3MiLCJlbnYiLCJHT09HTEVfTUFQU19BUElfS0VZIiwidWx1cnUiLCJsYXQiLCJsbmciLCJrZXlzIiwiZm9yZWFjaCIsImhhc1N5bWJvbHMiLCJTeW1ib2wiLCJ0b1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnR5Iiwib2JqIiwiXyIsImVudW1lcmFibGUiLCJ2YWx1ZSIsIngiLCJhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkIiwib2JqZWN0IiwibmFtZSIsInByZWRpY2F0ZSIsImZuIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwibWFwIiwicHJlZGljYXRlcyIsImFyZ3VtZW50cyIsInByb3BzIiwiY29uY2F0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaGFzIiwidG9QcmltaXRpdmUiLCJpdGVyYXRvciIsIiRpc05hTiIsIiRpc0Zpbml0ZSIsIk1BWF9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCJNYXRoIiwicG93IiwiYXNzaWduIiwic2lnbiIsIm1vZCIsImlzUHJpbWl0aXZlIiwicGFyc2VJbnRlZ2VyIiwicGFyc2VJbnQiLCJiaW5kIiwiYXJyYXlTbGljZSIsIkZ1bmN0aW9uIiwiQXJyYXkiLCJzbGljZSIsInN0clNsaWNlIiwiU3RyaW5nIiwiaXNCaW5hcnkiLCJSZWdFeHAiLCJ0ZXN0IiwiaXNPY3RhbCIsInJlZ2V4RXhlYyIsImV4ZWMiLCJub25XUyIsImpvaW4iLCJub25XU3JlZ2V4IiwiaGFzTm9uV1MiLCJpc0ludmFsaWRIZXhMaXRlcmFsIiwid3MiLCJ0cmltUmVnZXgiLCJyZXBsYWNlIiwiRVM1IiwiaGFzUmVnRXhwTWF0Y2hlciIsIkVTNiIsIkNhbGwiLCJGIiwiViIsImFyZ3MiLCJ0aGlzIiwiSXNDYWxsYWJsZSIsIlR5cGVFcnJvciIsImFwcGx5IiwiVG9QcmltaXRpdmUiLCJUb051bWJlciIsImFyZ3VtZW50IiwiTmFOIiwidHJpbW1lZCIsIlRvSW50MTYiLCJpbnQxNmJpdCIsIlRvVWludDE2IiwiVG9JbnQ4IiwiaW50OGJpdCIsIlRvVWludDgiLCJudW1iZXIiLCJwb3NJbnQiLCJmbG9vciIsImFicyIsIlRvVWludDhDbGFtcCIsIlRvU3RyaW5nIiwiVG9PYmplY3QiLCJSZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiVG9Qcm9wZXJ0eUtleSIsImtleSIsIlRvTGVuZ3RoIiwibGVuIiwiVG9JbnRlZ2VyIiwiQ2Fub25pY2FsTnVtZXJpY0luZGV4U3RyaW5nIiwiU2FtZVZhbHVlIiwiQ2hlY2tPYmplY3RDb2VyY2libGUiLCJJc0FycmF5IiwiaXNBcnJheSIsIklzQ29uc3RydWN0b3IiLCJJc0V4dGVuc2libGUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsImlzRXh0ZW5zaWJsZSIsIklzSW50ZWdlciIsIklzUHJvcGVydHlLZXkiLCJJc1JlZ0V4cCIsImlzUmVnRXhwIiwibWF0Y2giLCJUb0Jvb2xlYW4iLCJTYW1lVmFsdWVaZXJvIiwieSIsIkdldFYiLCJQIiwiR2V0TWV0aG9kIiwiTyIsImZ1bmMiLCJHZXQiLCJUeXBlIiwiU3BlY2llc0NvbnN0cnVjdG9yIiwiZGVmYXVsdENvbnN0cnVjdG9yIiwiQyIsImNvbnN0cnVjdG9yIiwiUyIsInNwZWNpZXMiLCJDb21wbGV0ZVByb3BlcnR5RGVzY3JpcHRvciIsIkRlc2MiLCJJc1Byb3BlcnR5RGVzY3JpcHRvciIsIklzR2VuZXJpY0Rlc2NyaXB0b3IiLCJJc0RhdGFEZXNjcmlwdG9yIiwiU2V0IiwiVGhyb3ciLCJIYXNPd25Qcm9wZXJ0eSIsIkhhc1Byb3BlcnR5IiwiSXNDb25jYXRTcHJlYWRhYmxlIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ByZWFkYWJsZSIsIkludm9rZSIsImFyZ3VtZW50c0xpc3QiLCJDcmVhdGVJdGVyUmVzdWx0T2JqZWN0IiwiZG9uZSIsIlJlZ0V4cEV4ZWMiLCJSIiwicmVzdWx0IiwiQXJyYXlTcGVjaWVzQ3JlYXRlIiwib3JpZ2luYWxBcnJheSIsIkNyZWF0ZURhdGFQcm9wZXJ0eSIsIm9sZERlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJleHRlbnNpYmxlIiwibmV3RGVzYyIsIkNyZWF0ZURhdGFQcm9wZXJ0eU9yVGhyb3ciLCJzdWNjZXNzIiwiQWR2YW5jZVN0cmluZ0luZGV4IiwiaW5kZXgiLCJ1bmljb2RlIiwiUmFuZ2VFcnJvciIsImZpcnN0IiwiY2hhckNvZGVBdCIsInNlY29uZCIsIkVTMjAxNSIsIkVTMjAxNiIsIlNhbWVWYWx1ZU5vbk51bWJlciIsIlRvSW50MzIiLCJUb1VpbnQzMiIsIm9wdE1lc3NhZ2UiLCJhbGxvd2VkIiwiW1tDb25maWd1cmFibGVdXSIsIltbRW51bWVyYWJsZV1dIiwiW1tHZXRdXSIsIltbU2V0XV0iLCJbW1ZhbHVlXV0iLCJbW1dyaXRhYmxlXV0iLCJpc0RhdGEiLCJJc0FjY2Vzc29yIiwiSXNBY2Nlc3NvckRlc2NyaXB0b3IiLCJGcm9tUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0Iiwic2V0IiwiVG9Qcm9wZXJ0eURlc2NyaXB0b3IiLCJPYmoiLCJkZXNjIiwiZ2V0dGVyIiwic2V0dGVyIiwiaGFzT3duUHJvcGVydHkiLCJ0YXJnZXQiLCJzb3VyY2UiLCJpc05hTiIsImlzRmluaXRlIiwiSW5maW5pdHkiLCJtb2R1bG8iLCJyZW1haW4iLCJpc0NhbGxhYmxlIiwiRVM1aW50ZXJuYWxTbG90cyIsImhpbnQiLCJhY3R1YWxIaW50IiwibWV0aG9kcyIsImlucHV0IiwiUHJlZmVycmVkVHlwZSIsImlzRGF0ZSIsImlzU3ltYm9sIiwiZXhvdGljVG9QcmltIiwidmFsdWVPZiIsIm1ldGhvZCIsIm1ldGhvZE5hbWVzIiwib3JkaW5hcnlUb1ByaW1pdGl2ZSIsImhhc093biIsImN0eCIsImsiLCJ0aGF0IiwiYm91bmQiLCJib3VuZExlbmd0aCIsIm1heCIsImJvdW5kQXJncyIsInB1c2giLCJFbXB0eSIsImltcGxlbWVudGF0aW9uIiwiZm5Ub1N0ciIsImNvbnN0cnVjdG9yUmVnZXgiLCJpc0VTNkNsYXNzRm4iLCJzcGFjZVN0cmlwcGVkIiwiaGFzVG9TdHJpbmdUYWciLCJ0b1N0cmluZ1RhZyIsInRyeUZ1bmN0aW9uT2JqZWN0Iiwic3RyQ2xhc3MiLCJnZXREYXkiLCJEYXRlIiwidHJ5RGF0ZU9iamVjdCIsImdPUEQiLCJkZXNjcmlwdG9yIiwibGFzdEluZGV4IiwidHJ5UmVnZXhFeGVjQ2FsbCIsInN5bVRvU3RyIiwic3ltU3RyaW5nUmVnZXgiLCJpc0FyZ3MiLCJpc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImhhc0RvbnRFbnVtQnVnIiwiaGFzUHJvdG9FbnVtQnVnIiwiZG9udEVudW1zIiwiZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUiLCJjdG9yIiwiZXhjbHVkZWRLZXlzIiwiJGNvbnNvbGUiLCIkZXh0ZXJuYWwiLCIkZnJhbWUiLCIkZnJhbWVFbGVtZW50IiwiJGZyYW1lcyIsIiRpbm5lckhlaWdodCIsIiRpbm5lcldpZHRoIiwiJG91dGVySGVpZ2h0IiwiJG91dGVyV2lkdGgiLCIkcGFnZVhPZmZzZXQiLCIkcGFnZVlPZmZzZXQiLCIkcGFyZW50IiwiJHNjcm9sbExlZnQiLCIkc2Nyb2xsVG9wIiwiJHNjcm9sbFgiLCIkc2Nyb2xsWSIsIiRzZWxmIiwiJHdlYmtpdEluZGV4ZWREQiIsIiR3ZWJraXRTdG9yYWdlSW5mbyIsIiR3aW5kb3ciLCJoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWciLCJ3aW5kb3ciLCJrZXlzU2hpbSIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImlzQXJndW1lbnRzIiwiaXNTdHJpbmciLCJ0aGVLZXlzIiwic2tpcFByb3RvIiwiaiIsInNraXBDb25zdHJ1Y3RvciIsImVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSIsInNoaW0iLCJvcmlnaW5hbEtleXMiLCJzdHIiLCJjYWxsZWUiLCJFUyIsInZhbHMiLCJkZWZpbmUiLCJnZXRQb2x5ZmlsbCIsInBvbHlmaWxsIiwidmFsdWVzIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiaW5jbHVkZXMiLCIkZGVmaW5lUHJvcGVydHkiLCJlcnJvciIsImluZGV4T2YiLCJzZWFyY2giLCJzdHJpbmciLCJzdHJpbmdMZW5ndGgiLCJzZWFyY2hTdHJpbmciLCJzZWFyY2hMZW5ndGgiLCJwb3NpdGlvbiIsInVuZGVmaW5lZCIsInBvcyIsIm1pbiIsInN0YXJ0c1dpdGgiLCJzdGFydCIsInN0YXRlIiwiaXNNb2JpbGUiLCJoYXNUb3VjaCIsInByb2plY3RzIiwiTUFJTl9OQVYiLCJNRU5VX0xJU1QiLCJSRVNVTFRTX0NPTlRBSU5FUiIsIkJBTk5FUiIsIkxPR09fV1JBUCIsIlNFQVJDSF9SRVNVTFRTIiwiU0VBUkNIX0lDT04iLCJDTEVBUl9JQ09OIiwiT2JqX3ZhbHVlcyIsImZpbmRNYXRjaGVzIiwiaGlkZSIsImZvckVhY2giLCIkIiwiYWRkQ2xhc3MiLCJzaG93IiwicmVtb3ZlQ2xhc3MiLCJjbGVhclJlc3VsdHMiLCJhZGQiLCJoZWlnaHQiLCJodG1sIiwic2hvd1NlYXJjaEljb24iLCJzaG93UmVzdWx0cyIsInF1ZXJ5IiwidG9Mb3dlckNhc2UiLCJ0cmltIiwicGF0aG5hbWUiLCJsb2NhdGlvbiIsImNhdGVnb3J5IiwicmVzdWx0cyIsImNzcyIsImZpeEJhbm5lciIsInRvZ2dsZUhlYWRlckJnSW1nIiwiZXhwYW5kTmF2Iiwic2hyaW5rTmF2Iiwic2V0QmdJbWdIZWlnaHQiLCJmYWRlT3V0TG9hZFNjcmVlbiIsImhpZ2hsaWdodFByb2plY3RDYXJkIiwiY2hlY2tTaXplIiwid2lkdGgiLCJpbm5lcldpZHRoIiwibmF2Q2xpY2tzIiwicHJldmVudERlZmF1bHQiLCJ0b2dnbGVDbGFzcyIsImhhc0NsYXNzIiwiY2F0ZWdvcnlGb3JtIiwidmFsIiwiZm9jdXMiLCJwcm9qZWN0RGV0YWlsRXZlbnRzIiwiZGF0YSIsImhyZWYiLCJzdGFydFNsaWRlU2hvdyIsImluaXRNYXAiLCJ1dGlscyIsInJlc2l6ZSIsInNjcm9sbCIsInBhdGgiLCJpbml0IiwiYWpheCIsInVybCIsInR5cGUiLCJkYXRhVHlwZSIsInJlcyIsImNvbnNvbGUiLCJsb2ciLCJqcVhIUiIsInRleHRTdGF0dXMiLCJlcnIiLCJkaXNwbGF5UHJvamVjdFNsaWRlciIsImRpc3BsYXlNb2RlbFNsaWRlciIsInJlc3BvbnNpdmVSZXNsaWNrIiwiY2VudGVyIiwiZ29vZ2xlIiwibWFwcyIsIk1hcCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ6b29tIiwic3R5bGVzIiwibXlNYXBTdHlsZXMiLCJNYXJrZXJXaXRoTGFiZWwiLCJsYWJlbENvbnRlbnQiLCJsYWJlbEFuY2hvciIsIlBvaW50IiwibGFiZWxDbGFzcyIsImxhYmVsSW5CYWNrZ3JvdW5kIiwiaWNvbiIsImNvbG9yIiwiZXZlbnQiLCJhZGREb21MaXN0ZW5lciIsImdldENlbnRlciIsInNldENlbnRlciIsImluZm93aW5kb3ciLCJJbmZvV2luZG93Iiwic2V0Q29udGVudCIsIm9wZW4iLCJlbGVtZW50VHlwZSIsInN0eWxlcnMiLCJmZWF0dXJlVHlwZSIsIlRST1dFTF9JQ09OIiwiUFJPSkVDVF9TTElERVIiLCJNT0RFTF9TTElERVIiLCJpbml0UHJvamVjdFNsaWRlciIsInNsaWNrIiwiZG90cyIsImFycm93cyIsIm5leHRBcnJvdyIsInByZXZBcnJvdyIsImluZmluaXRlIiwic3BlZWQiLCJzbGlkZXNUb1Nob3ciLCJzbGlkZXNUb1Njcm9sbCIsInZhcmlhYmxlV2lkdGgiLCJyZXNwb25zaXZlIiwiYnJlYWtwb2ludCIsInNldHRpbmdzIiwidmlzaXN0ZWQiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJyZW1vdmUiLCJjdXJyZW50U2xpZGUiLCJzZXRJdGVtIiwic2Nyb2xsQmFyV2lkdGgiLCJnZXRTY3JvbGxiYXJXaWR0aCIsImluaXRNb2RlbFNsaWRlciIsImNlbnRlck1vZGUiLCJpbml0aWFsU2xpZGUiLCJ1bnNsaWNrIiwic2xpZGVyIiwibmV4dFNsaWRlIiwiJGN1cnJlbnQiLCJzbGlkZU51bSIsImF0dHIiLCJkZWxheSIsInNldEludGVydmFsIiwid2luVG9Ub3BEb2MiLCJzY3JvbGxUb3AiLCJvZmZzZXQiLCJ0b3AiLCIkYmciLCJoIiwiYXJyIiwiY29tcGFyZVN0ciIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJuZXh0IiwiYWRkZWQiLCJjdXJyZW50Iiwid29yZHMiLCJzcGxpdCIsInRhcmdldHMiLCJyZXR1cm4iLCJlYWNoIiwiZWwiLCJlbFRvcCIsImVsTWlkZGxlIiwib3V0ZXJIZWlnaHQiLCJ3aW5Ub3AiLCJ3aW5NaWRkbGUiLCJ1cHBlckJvdW5kIiwibG93ZXJCb3VuZCIsImZpbmQiLCJvdXRlciIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsInZpc2liaWxpdHkiLCJtc092ZXJmbG93U3R5bGUiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJ3aWR0aE5vU2Nyb2xsIiwib2Zmc2V0V2lkdGgiLCJvdmVyZmxvdyIsImlubmVyIiwid2lkdGhXaXRoU2Nyb2xsIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUFBLE9BQUEsU0FBQUEsRUFBQUMsRUFBQUMsRUFBQUMsR0FBQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUFBLElBQUFKLEVBQUFHLEdBQUEsQ0FBQSxJQUFBSixFQUFBSSxHQUFBLENBQUEsSUFBQUUsRUFBQSxtQkFBQUMsU0FBQUEsUUFBQSxJQUFBRixHQUFBQyxFQUFBLE9B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a0JBbENKLFdBQ0ksSUFBSTBDLEVBQVExRixTQUFTMkYsY0FBYyxPQUNuQ0QsRUFBTUUsTUFBTUMsV0FBYSxTQUN6QkgsRUFBTUUsTUFBTWhJLE1BQVEsUUFDcEI4SCxFQUFNRSxNQUFNRSxnQkFBa0IsWUFFOUI5RixTQUFTK0YsS0FBS0MsWUFBWU4sR0FFMUIsSUFBSU8sRUFBZ0JQLEVBQU1RLFlBRTFCUixFQUFNRSxNQUFNTyxTQUFXLFNBR3ZCLElBQUlDLEVBQVFwRyxTQUFTMkYsY0FBYyxPQUNuQ1MsRUFBTVIsTUFBTWhJLE1BQVEsT0FDcEI4SCxFQUFNTSxZQUFZSSxHQUVsQixJQUFJQyxFQUFrQkQsRUFBTUYsWUFLNUIsT0FGQVIsRUFBTVksV0FBV0MsWUFBWWIsR0FFdEJPLEVBQWdCSSIsImZpbGUiOiJidW5kbGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9cmV0dXJuIGV9KSgpIiwiLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gXG4vL1xuLy9cdENvbmZpZ1xuLy9cbi8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIFxuXG5leHBvcnRzLlBPUlQgPSBwcm9jZXNzLmVudi5QT1JUIHx8IDgwODA7XG5cbmV4cG9ydHMuR09PR0xFX01BUFNfQVBJX0tFWSA9IHByb2Nlc3MuZW52LkdPT0dMRV9NQVBTX0FQSV9LRVk7XG5cbmV4cG9ydHMudWx1cnUgPSB7IFxuICAgIGxhdDogNDAuNjY5LCBsbmc6IC03NS4xNTVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBrZXlzID0gcmVxdWlyZSgnb2JqZWN0LWtleXMnKTtcbnZhciBmb3JlYWNoID0gcmVxdWlyZSgnZm9yZWFjaCcpO1xudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2woKSA9PT0gJ3N5bWJvbCc7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gKGZuKSB7XG5cdHJldHVybiB0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgdG9TdHIuY2FsbChmbikgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xuXG52YXIgYXJlUHJvcGVydHlEZXNjcmlwdG9yc1N1cHBvcnRlZCA9IGZ1bmN0aW9uICgpIHtcblx0dmFyIG9iaiA9IHt9O1xuXHR0cnkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICd4JywgeyBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IG9iaiB9KTtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMsIG5vLXJlc3RyaWN0ZWQtc3ludGF4ICovXG4gICAgICAgIGZvciAodmFyIF8gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzLCBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuXHRcdHJldHVybiBvYmoueCA9PT0gb2JqO1xuXHR9IGNhdGNoIChlKSB7IC8qIHRoaXMgaXMgSUUgOC4gKi9cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgc3VwcG9ydHNEZXNjcmlwdG9ycyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBhcmVQcm9wZXJ0eURlc2NyaXB0b3JzU3VwcG9ydGVkKCk7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIHZhbHVlLCBwcmVkaWNhdGUpIHtcblx0aWYgKG5hbWUgaW4gb2JqZWN0ICYmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkpIHtcblx0XHRyZXR1cm47XG5cdH1cblx0aWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0b2JqZWN0W25hbWVdID0gdmFsdWU7XG5cdH1cbn07XG5cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwKSB7XG5cdHZhciBwcmVkaWNhdGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB7fTtcblx0dmFyIHByb3BzID0ga2V5cyhtYXApO1xuXHRpZiAoaGFzU3ltYm9scykge1xuXHRcdHByb3BzID0gcHJvcHMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMobWFwKSk7XG5cdH1cblx0Zm9yZWFjaChwcm9wcywgZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIG5hbWUsIG1hcFtuYW1lXSwgcHJlZGljYXRlc1tuYW1lXSk7XG5cdH0pO1xufTtcblxuZGVmaW5lUHJvcGVydGllcy5zdXBwb3J0c0Rlc2NyaXB0b3JzID0gISFzdXBwb3J0c0Rlc2NyaXB0b3JzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZVByb3BlcnRpZXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJ2VzLXRvLXByaW1pdGl2ZS9lczYnKTtcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBoYXNTeW1ib2xzID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAnc3ltYm9sJztcblxudmFyICRpc05hTiA9IHJlcXVpcmUoJy4vaGVscGVycy9pc05hTicpO1xudmFyICRpc0Zpbml0ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc0Zpbml0ZScpO1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUiB8fCBNYXRoLnBvdygyLCA1MykgLSAxO1xuXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9oZWxwZXJzL2Fzc2lnbicpO1xudmFyIHNpZ24gPSByZXF1aXJlKCcuL2hlbHBlcnMvc2lnbicpO1xudmFyIG1vZCA9IHJlcXVpcmUoJy4vaGVscGVycy9tb2QnKTtcbnZhciBpc1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vaGVscGVycy9pc1ByaW1pdGl2ZScpO1xudmFyIHBhcnNlSW50ZWdlciA9IHBhcnNlSW50O1xudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG52YXIgYXJyYXlTbGljZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBBcnJheS5wcm90b3R5cGUuc2xpY2UpO1xudmFyIHN0clNsaWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUuc2xpY2UpO1xudmFyIGlzQmluYXJ5ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFJlZ0V4cC5wcm90b3R5cGUudGVzdCwgL14wYlswMV0rJC9pKTtcbnZhciBpc09jdGFsID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFJlZ0V4cC5wcm90b3R5cGUudGVzdCwgL14wb1swLTddKyQvaSk7XG52YXIgcmVnZXhFeGVjID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFJlZ0V4cC5wcm90b3R5cGUuZXhlYyk7XG52YXIgbm9uV1MgPSBbJ1xcdTAwODUnLCAnXFx1MjAwYicsICdcXHVmZmZlJ10uam9pbignJyk7XG52YXIgbm9uV1NyZWdleCA9IG5ldyBSZWdFeHAoJ1snICsgbm9uV1MgKyAnXScsICdnJyk7XG52YXIgaGFzTm9uV1MgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS50ZXN0LCBub25XU3JlZ2V4KTtcbnZhciBpbnZhbGlkSGV4TGl0ZXJhbCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xudmFyIGlzSW52YWxpZEhleExpdGVyYWwgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS50ZXN0LCBpbnZhbGlkSGV4TGl0ZXJhbCk7XG5cbi8vIHdoaXRlc3BhY2UgZnJvbTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS41LjQuMjBcbi8vIGltcGxlbWVudGF0aW9uIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2Jsb2IvdjMuNC4wL2VzNS1zaGltLmpzI0wxMzA0LUwxMzI0XG52YXIgd3MgPSBbXG5cdCdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycsXG5cdCdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOCcsXG5cdCdcXHUyMDI5XFx1RkVGRidcbl0uam9pbignJyk7XG52YXIgdHJpbVJlZ2V4ID0gbmV3IFJlZ0V4cCgnKF5bJyArIHdzICsgJ10rKXwoWycgKyB3cyArICddKyQpJywgJ2cnKTtcbnZhciByZXBsYWNlID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIFN0cmluZy5wcm90b3R5cGUucmVwbGFjZSk7XG52YXIgdHJpbSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuXHRyZXR1cm4gcmVwbGFjZSh2YWx1ZSwgdHJpbVJlZ2V4LCAnJyk7XG59O1xuXG52YXIgRVM1ID0gcmVxdWlyZSgnLi9lczUnKTtcblxudmFyIGhhc1JlZ0V4cE1hdGNoZXIgPSByZXF1aXJlKCdpcy1yZWdleCcpO1xuXG4vLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtYWJzdHJhY3Qtb3BlcmF0aW9uc1xudmFyIEVTNiA9IGFzc2lnbihhc3NpZ24oe30sIEVTNSksIHtcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtY2FsbC1mLXYtYXJnc1xuXHRDYWxsOiBmdW5jdGlvbiBDYWxsKEYsIFYpIHtcblx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogW107XG5cdFx0aWYgKCF0aGlzLklzQ2FsbGFibGUoRikpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoRiArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0cmV0dXJuIEYuYXBwbHkoViwgYXJncyk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvcHJpbWl0aXZlXG5cdFRvUHJpbWl0aXZlOiB0b1ByaW1pdGl2ZSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9ib29sZWFuXG5cdC8vIFRvQm9vbGVhbjogRVM1LlRvQm9vbGVhbixcblxuXHQvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtdG9udW1iZXJcblx0VG9OdW1iZXI6IGZ1bmN0aW9uIFRvTnVtYmVyKGFyZ3VtZW50KSB7XG5cdFx0dmFyIHZhbHVlID0gaXNQcmltaXRpdmUoYXJndW1lbnQpID8gYXJndW1lbnQgOiB0b1ByaW1pdGl2ZShhcmd1bWVudCwgTnVtYmVyKTtcblx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBudW1iZXInKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdGlmIChpc0JpbmFyeSh2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuVG9OdW1iZXIocGFyc2VJbnRlZ2VyKHN0clNsaWNlKHZhbHVlLCAyKSwgMikpO1xuXHRcdFx0fSBlbHNlIGlmIChpc09jdGFsKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5Ub051bWJlcihwYXJzZUludGVnZXIoc3RyU2xpY2UodmFsdWUsIDIpLCA4KSk7XG5cdFx0XHR9IGVsc2UgaWYgKGhhc05vbldTKHZhbHVlKSB8fCBpc0ludmFsaWRIZXhMaXRlcmFsKHZhbHVlKSkge1xuXHRcdFx0XHRyZXR1cm4gTmFOO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIHRyaW1tZWQgPSB0cmltKHZhbHVlKTtcblx0XHRcdFx0aWYgKHRyaW1tZWQgIT09IHZhbHVlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuVG9OdW1iZXIodHJpbW1lZCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIE51bWJlcih2YWx1ZSk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvaW50ZWdlclxuXHQvLyBUb0ludGVnZXI6IEVTNS5Ub051bWJlcixcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9pbnQzMlxuXHQvLyBUb0ludDMyOiBFUzUuVG9JbnQzMixcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG91aW50MzJcblx0Ly8gVG9VaW50MzI6IEVTNS5Ub1VpbnQzMixcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9pbnQxNlxuXHRUb0ludDE2OiBmdW5jdGlvbiBUb0ludDE2KGFyZ3VtZW50KSB7XG5cdFx0dmFyIGludDE2Yml0ID0gdGhpcy5Ub1VpbnQxNihhcmd1bWVudCk7XG5cdFx0cmV0dXJuIGludDE2Yml0ID49IDB4ODAwMCA/IGludDE2Yml0IC0gMHgxMDAwMCA6IGludDE2Yml0O1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b3VpbnQxNlxuXHQvLyBUb1VpbnQxNjogRVM1LlRvVWludDE2LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b2ludDhcblx0VG9JbnQ4OiBmdW5jdGlvbiBUb0ludDgoYXJndW1lbnQpIHtcblx0XHR2YXIgaW50OGJpdCA9IHRoaXMuVG9VaW50OChhcmd1bWVudCk7XG5cdFx0cmV0dXJuIGludDhiaXQgPj0gMHg4MCA/IGludDhiaXQgLSAweDEwMCA6IGludDhiaXQ7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvdWludDhcblx0VG9VaW50ODogZnVuY3Rpb24gVG9VaW50OChhcmd1bWVudCkge1xuXHRcdHZhciBudW1iZXIgPSB0aGlzLlRvTnVtYmVyKGFyZ3VtZW50KTtcblx0XHRpZiAoJGlzTmFOKG51bWJlcikgfHwgbnVtYmVyID09PSAwIHx8ICEkaXNGaW5pdGUobnVtYmVyKSkgeyByZXR1cm4gMDsgfVxuXHRcdHZhciBwb3NJbnQgPSBzaWduKG51bWJlcikgKiBNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikpO1xuXHRcdHJldHVybiBtb2QocG9zSW50LCAweDEwMCk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvdWludDhjbGFtcFxuXHRUb1VpbnQ4Q2xhbXA6IGZ1bmN0aW9uIFRvVWludDhDbGFtcChhcmd1bWVudCkge1xuXHRcdHZhciBudW1iZXIgPSB0aGlzLlRvTnVtYmVyKGFyZ3VtZW50KTtcblx0XHRpZiAoJGlzTmFOKG51bWJlcikgfHwgbnVtYmVyIDw9IDApIHsgcmV0dXJuIDA7IH1cblx0XHRpZiAobnVtYmVyID49IDB4RkYpIHsgcmV0dXJuIDB4RkY7IH1cblx0XHR2YXIgZiA9IE1hdGguZmxvb3IoYXJndW1lbnQpO1xuXHRcdGlmIChmICsgMC41IDwgbnVtYmVyKSB7IHJldHVybiBmICsgMTsgfVxuXHRcdGlmIChudW1iZXIgPCBmICsgMC41KSB7IHJldHVybiBmOyB9XG5cdFx0aWYgKGYgJSAyICE9PSAwKSB7IHJldHVybiBmICsgMTsgfVxuXHRcdHJldHVybiBmO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy10b3N0cmluZ1xuXHRUb1N0cmluZzogZnVuY3Rpb24gVG9TdHJpbmcoYXJndW1lbnQpIHtcblx0XHRpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3ltYm9sJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgYSBTeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcnKTtcblx0XHR9XG5cdFx0cmV0dXJuIFN0cmluZyhhcmd1bWVudCk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvb2JqZWN0XG5cdFRvT2JqZWN0OiBmdW5jdGlvbiBUb09iamVjdCh2YWx1ZSkge1xuXHRcdHRoaXMuUmVxdWlyZU9iamVjdENvZXJjaWJsZSh2YWx1ZSk7XG5cdFx0cmV0dXJuIE9iamVjdCh2YWx1ZSk7XG5cdH0sXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLXRvcHJvcGVydHlrZXlcblx0VG9Qcm9wZXJ0eUtleTogZnVuY3Rpb24gVG9Qcm9wZXJ0eUtleShhcmd1bWVudCkge1xuXHRcdHZhciBrZXkgPSB0aGlzLlRvUHJpbWl0aXZlKGFyZ3VtZW50LCBTdHJpbmcpO1xuXHRcdHJldHVybiB0eXBlb2Yga2V5ID09PSAnc3ltYm9sJyA/IGtleSA6IHRoaXMuVG9TdHJpbmcoa2V5KTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9sZW5ndGhcblx0VG9MZW5ndGg6IGZ1bmN0aW9uIFRvTGVuZ3RoKGFyZ3VtZW50KSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMuVG9JbnRlZ2VyKGFyZ3VtZW50KTtcblx0XHRpZiAobGVuIDw9IDApIHsgcmV0dXJuIDA7IH0gLy8gaW5jbHVkZXMgY29udmVydGluZyAtMCB0byArMFxuXHRcdGlmIChsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7IHJldHVybiBNQVhfU0FGRV9JTlRFR0VSOyB9XG5cdFx0cmV0dXJuIGxlbjtcblx0fSxcblxuXHQvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY2Fub25pY2FsbnVtZXJpY2luZGV4c3RyaW5nXG5cdENhbm9uaWNhbE51bWVyaWNJbmRleFN0cmluZzogZnVuY3Rpb24gQ2Fub25pY2FsTnVtZXJpY0luZGV4U3RyaW5nKGFyZ3VtZW50KSB7XG5cdFx0aWYgKHRvU3RyLmNhbGwoYXJndW1lbnQpICE9PSAnW29iamVjdCBTdHJpbmddJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignbXVzdCBiZSBhIHN0cmluZycpO1xuXHRcdH1cblx0XHRpZiAoYXJndW1lbnQgPT09ICctMCcpIHsgcmV0dXJuIC0wOyB9XG5cdFx0dmFyIG4gPSB0aGlzLlRvTnVtYmVyKGFyZ3VtZW50KTtcblx0XHRpZiAodGhpcy5TYW1lVmFsdWUodGhpcy5Ub1N0cmluZyhuKSwgYXJndW1lbnQpKSB7IHJldHVybiBuOyB9XG5cdFx0cmV0dXJuIHZvaWQgMDtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxuXHRSZXF1aXJlT2JqZWN0Q29lcmNpYmxlOiBFUzUuQ2hlY2tPYmplY3RDb2VyY2libGUsXG5cblx0Ly8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWlzYXJyYXlcblx0SXNBcnJheTogQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBJc0FycmF5KGFyZ3VtZW50KSB7XG5cdFx0cmV0dXJuIHRvU3RyLmNhbGwoYXJndW1lbnQpID09PSAnW29iamVjdCBBcnJheV0nO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1pc2NhbGxhYmxlXG5cdC8vIElzQ2FsbGFibGU6IEVTNS5Jc0NhbGxhYmxlLFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1pc2NvbnN0cnVjdG9yXG5cdElzQ29uc3RydWN0b3I6IGZ1bmN0aW9uIElzQ29uc3RydWN0b3IoYXJndW1lbnQpIHtcblx0XHRyZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSAnZnVuY3Rpb24nICYmICEhYXJndW1lbnQucHJvdG90eXBlOyAvLyB1bmZvcnR1bmF0ZWx5IHRoZXJlJ3Mgbm8gd2F5IHRvIHRydWx5IGNoZWNrIHRoaXMgd2l0aG91dCB0cnkvY2F0Y2ggYG5ldyBhcmd1bWVudGBcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtaXNleHRlbnNpYmxlLW9cblx0SXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBJc0V4dGVuc2libGUob2JqKSB7XG5cdFx0aWYgKCFPYmplY3QucHJldmVudEV4dGVuc2lvbnMpIHsgcmV0dXJuIHRydWU7IH1cblx0XHRpZiAoaXNQcmltaXRpdmUob2JqKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gT2JqZWN0LmlzRXh0ZW5zaWJsZShvYmopO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1pc2ludGVnZXJcblx0SXNJbnRlZ2VyOiBmdW5jdGlvbiBJc0ludGVnZXIoYXJndW1lbnQpIHtcblx0XHRpZiAodHlwZW9mIGFyZ3VtZW50ICE9PSAnbnVtYmVyJyB8fCAkaXNOYU4oYXJndW1lbnQpIHx8ICEkaXNGaW5pdGUoYXJndW1lbnQpKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHZhciBhYnMgPSBNYXRoLmFicyhhcmd1bWVudCk7XG5cdFx0cmV0dXJuIE1hdGguZmxvb3IoYWJzKSA9PT0gYWJzO1xuXHR9LFxuXG5cdC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1pc3Byb3BlcnR5a2V5XG5cdElzUHJvcGVydHlLZXk6IGZ1bmN0aW9uIElzUHJvcGVydHlLZXkoYXJndW1lbnQpIHtcblx0XHRyZXR1cm4gdHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdzeW1ib2wnO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc3JlZ2V4cFxuXHRJc1JlZ0V4cDogZnVuY3Rpb24gSXNSZWdFeHAoYXJndW1lbnQpIHtcblx0XHRpZiAoIWFyZ3VtZW50IHx8IHR5cGVvZiBhcmd1bWVudCAhPT0gJ29iamVjdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKGhhc1N5bWJvbHMpIHtcblx0XHRcdHZhciBpc1JlZ0V4cCA9IGFyZ3VtZW50W1N5bWJvbC5tYXRjaF07XG5cdFx0XHRpZiAodHlwZW9mIGlzUmVnRXhwICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRyZXR1cm4gRVM1LlRvQm9vbGVhbihpc1JlZ0V4cCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBoYXNSZWdFeHBNYXRjaGVyKGFyZ3VtZW50KTtcblx0fSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtc2FtZXZhbHVlXG5cdC8vIFNhbWVWYWx1ZTogRVM1LlNhbWVWYWx1ZSxcblxuXHQvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtc2FtZXZhbHVlemVyb1xuXHRTYW1lVmFsdWVaZXJvOiBmdW5jdGlvbiBTYW1lVmFsdWVaZXJvKHgsIHkpIHtcblx0XHRyZXR1cm4gKHggPT09IHkpIHx8ICgkaXNOYU4oeCkgJiYgJGlzTmFOKHkpKTtcblx0fSxcblxuXHQvKipcblx0ICogNy4zLjIgR2V0ViAoViwgUClcblx0ICogMS4gQXNzZXJ0OiBJc1Byb3BlcnR5S2V5KFApIGlzIHRydWUuXG5cdCAqIDIuIExldCBPIGJlIFRvT2JqZWN0KFYpLlxuXHQgKiAzLiBSZXR1cm5JZkFicnVwdChPKS5cblx0ICogNC4gUmV0dXJuIE8uW1tHZXRdXShQLCBWKS5cblx0ICovXG5cdEdldFY6IGZ1bmN0aW9uIEdldFYoViwgUCkge1xuXHRcdC8vIDcuMy4yLjFcblx0XHRpZiAoIXRoaXMuSXNQcm9wZXJ0eUtleShQKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogSXNQcm9wZXJ0eUtleShQKSBpcyBub3QgdHJ1ZScpO1xuXHRcdH1cblxuXHRcdC8vIDcuMy4yLjItM1xuXHRcdHZhciBPID0gdGhpcy5Ub09iamVjdChWKTtcblxuXHRcdC8vIDcuMy4yLjRcblx0XHRyZXR1cm4gT1tQXTtcblx0fSxcblxuXHQvKipcblx0ICogNy4zLjkgLSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZ2V0bWV0aG9kXG5cdCAqIDEuIEFzc2VydDogSXNQcm9wZXJ0eUtleShQKSBpcyB0cnVlLlxuXHQgKiAyLiBMZXQgZnVuYyBiZSBHZXRWKE8sIFApLlxuXHQgKiAzLiBSZXR1cm5JZkFicnVwdChmdW5jKS5cblx0ICogNC4gSWYgZnVuYyBpcyBlaXRoZXIgdW5kZWZpbmVkIG9yIG51bGwsIHJldHVybiB1bmRlZmluZWQuXG5cdCAqIDUuIElmIElzQ2FsbGFibGUoZnVuYykgaXMgZmFsc2UsIHRocm93IGEgVHlwZUVycm9yIGV4Y2VwdGlvbi5cblx0ICogNi4gUmV0dXJuIGZ1bmMuXG5cdCAqL1xuXHRHZXRNZXRob2Q6IGZ1bmN0aW9uIEdldE1ldGhvZChPLCBQKSB7XG5cdFx0Ly8gNy4zLjkuMVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdFx0fVxuXG5cdFx0Ly8gNy4zLjkuMlxuXHRcdHZhciBmdW5jID0gdGhpcy5HZXRWKE8sIFApO1xuXG5cdFx0Ly8gNy4zLjkuNFxuXHRcdGlmIChmdW5jID09IG51bGwpIHtcblx0XHRcdHJldHVybiB2b2lkIDA7XG5cdFx0fVxuXG5cdFx0Ly8gNy4zLjkuNVxuXHRcdGlmICghdGhpcy5Jc0NhbGxhYmxlKGZ1bmMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFAgKyAnaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cblx0XHQvLyA3LjMuOS42XG5cdFx0cmV0dXJuIGZ1bmM7XG5cdH0sXG5cblx0LyoqXG5cdCAqIDcuMy4xIEdldCAoTywgUCkgLSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtZ2V0LW8tcFxuXHQgKiAxLiBBc3NlcnQ6IFR5cGUoTykgaXMgT2JqZWN0LlxuXHQgKiAyLiBBc3NlcnQ6IElzUHJvcGVydHlLZXkoUCkgaXMgdHJ1ZS5cblx0ICogMy4gUmV0dXJuIE8uW1tHZXRdXShQLCBPKS5cblx0ICovXG5cdEdldDogZnVuY3Rpb24gR2V0KE8sIFApIHtcblx0XHQvLyA3LjMuMS4xXG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHRcdH1cblx0XHQvLyA3LjMuMS4yXG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0XHR9XG5cdFx0Ly8gNy4zLjEuM1xuXHRcdHJldHVybiBPW1BdO1xuXHR9LFxuXG5cdFR5cGU6IGZ1bmN0aW9uIFR5cGUoeCkge1xuXHRcdGlmICh0eXBlb2YgeCA9PT0gJ3N5bWJvbCcpIHtcblx0XHRcdHJldHVybiAnU3ltYm9sJztcblx0XHR9XG5cdFx0cmV0dXJuIEVTNS5UeXBlKHgpO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcblx0U3BlY2llc0NvbnN0cnVjdG9yOiBmdW5jdGlvbiBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoTykgaXMgbm90IE9iamVjdCcpO1xuXHRcdH1cblx0XHR2YXIgQyA9IE8uY29uc3RydWN0b3I7XG5cdFx0aWYgKHR5cGVvZiBDID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGRlZmF1bHRDb25zdHJ1Y3Rvcjtcblx0XHR9XG5cdFx0aWYgKHRoaXMuVHlwZShDKSAhPT0gJ09iamVjdCcpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ08uY29uc3RydWN0b3IgaXMgbm90IGFuIE9iamVjdCcpO1xuXHRcdH1cblx0XHR2YXIgUyA9IGhhc1N5bWJvbHMgJiYgU3ltYm9sLnNwZWNpZXMgPyBDW1N5bWJvbC5zcGVjaWVzXSA6IHZvaWQgMDtcblx0XHRpZiAoUyA9PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gZGVmYXVsdENvbnN0cnVjdG9yO1xuXHRcdH1cblx0XHRpZiAodGhpcy5Jc0NvbnN0cnVjdG9yKFMpKSB7XG5cdFx0XHRyZXR1cm4gUztcblx0XHR9XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignbm8gY29uc3RydWN0b3IgZm91bmQnKTtcblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1jb21wbGV0ZXByb3BlcnR5ZGVzY3JpcHRvclxuXHRDb21wbGV0ZVByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gQ29tcGxldGVQcm9wZXJ0eURlc2NyaXB0b3IoRGVzYykge1xuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRGVzYyBtdXN0IGJlIGEgUHJvcGVydHkgRGVzY3JpcHRvcicpO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLklzR2VuZXJpY0Rlc2NyaXB0b3IoRGVzYykgfHwgdGhpcy5Jc0RhdGFEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHRpZiAoIWhhcyhEZXNjLCAnW1tWYWx1ZV1dJykpIHtcblx0XHRcdFx0RGVzY1snW1tWYWx1ZV1dJ10gPSB2b2lkIDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWhhcyhEZXNjLCAnW1tXcml0YWJsZV1dJykpIHtcblx0XHRcdFx0RGVzY1snW1tXcml0YWJsZV1dJ10gPSBmYWxzZTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCFoYXMoRGVzYywgJ1tbR2V0XV0nKSkge1xuXHRcdFx0XHREZXNjWydbW0dldF1dJ10gPSB2b2lkIDA7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWhhcyhEZXNjLCAnW1tTZXRdXScpKSB7XG5cdFx0XHRcdERlc2NbJ1tbU2V0XV0nXSA9IHZvaWQgMDtcblx0XHRcdH1cblx0XHR9XG5cdFx0aWYgKCFoYXMoRGVzYywgJ1tbRW51bWVyYWJsZV1dJykpIHtcblx0XHRcdERlc2NbJ1tbRW51bWVyYWJsZV1dJ10gPSBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKCFoYXMoRGVzYywgJ1tbQ29uZmlndXJhYmxlXV0nKSkge1xuXHRcdFx0RGVzY1snW1tDb25maWd1cmFibGVdXSddID0gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiBEZXNjO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLXNldC1vLXAtdi10aHJvd1xuXHRTZXQ6IGZ1bmN0aW9uIFNldChPLCBQLCBWLCBUaHJvdykge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuVHlwZShUaHJvdykgIT09ICdCb29sZWFuJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVGhyb3cgbXVzdCBiZSBhIEJvb2xlYW4nKTtcblx0XHR9XG5cdFx0aWYgKFRocm93KSB7XG5cdFx0XHRPW1BdID0gVjtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRPW1BdID0gVjtcblx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1oYXNvd25wcm9wZXJ0eVxuXHRIYXNPd25Qcm9wZXJ0eTogZnVuY3Rpb24gSGFzT3duUHJvcGVydHkoTywgUCkge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0XHR9XG5cdFx0cmV0dXJuIGhhcyhPLCBQKTtcblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1oYXNwcm9wZXJ0eVxuXHRIYXNQcm9wZXJ0eTogZnVuY3Rpb24gSGFzUHJvcGVydHkoTywgUCkge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPIG11c3QgYmUgYW4gT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdQIG11c3QgYmUgYSBQcm9wZXJ0eSBLZXknKTtcblx0XHR9XG5cdFx0cmV0dXJuIFAgaW4gTztcblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1pc2NvbmNhdHNwcmVhZGFibGVcblx0SXNDb25jYXRTcHJlYWRhYmxlOiBmdW5jdGlvbiBJc0NvbmNhdFNwcmVhZGFibGUoTykge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGlmIChoYXNTeW1ib2xzICYmIHR5cGVvZiBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlID09PSAnc3ltYm9sJykge1xuXHRcdFx0dmFyIHNwcmVhZGFibGUgPSB0aGlzLkdldChPLCBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlKTtcblx0XHRcdGlmICh0eXBlb2Ygc3ByZWFkYWJsZSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuVG9Cb29sZWFuKHNwcmVhZGFibGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5Jc0FycmF5KE8pO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWludm9rZVxuXHRJbnZva2U6IGZ1bmN0aW9uIEludm9rZShPLCBQKSB7XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1AgbXVzdCBiZSBhIFByb3BlcnR5IEtleScpO1xuXHRcdH1cblx0XHR2YXIgYXJndW1lbnRzTGlzdCA9IGFycmF5U2xpY2UoYXJndW1lbnRzLCAyKTtcblx0XHR2YXIgZnVuYyA9IHRoaXMuR2V0VihPLCBQKTtcblx0XHRyZXR1cm4gdGhpcy5DYWxsKGZ1bmMsIE8sIGFyZ3VtZW50c0xpc3QpO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzYuMC8jc2VjLWNyZWF0ZWl0ZXJyZXN1bHRvYmplY3Rcblx0Q3JlYXRlSXRlclJlc3VsdE9iamVjdDogZnVuY3Rpb24gQ3JlYXRlSXRlclJlc3VsdE9iamVjdCh2YWx1ZSwgZG9uZSkge1xuXHRcdGlmICh0aGlzLlR5cGUoZG9uZSkgIT09ICdCb29sZWFuJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShkb25lKSBpcyBub3QgQm9vbGVhbicpO1xuXHRcdH1cblx0XHRyZXR1cm4ge1xuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0ZG9uZTogZG9uZVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtcmVnZXhwZXhlY1xuXHRSZWdFeHBFeGVjOiBmdW5jdGlvbiBSZWdFeHBFeGVjKFIsIFMpIHtcblx0XHRpZiAodGhpcy5UeXBlKFIpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUiBtdXN0IGJlIGFuIE9iamVjdCcpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5UeXBlKFMpICE9PSAnU3RyaW5nJykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignUyBtdXN0IGJlIGEgU3RyaW5nJyk7XG5cdFx0fVxuXHRcdHZhciBleGVjID0gdGhpcy5HZXQoUiwgJ2V4ZWMnKTtcblx0XHRpZiAodGhpcy5Jc0NhbGxhYmxlKGV4ZWMpKSB7XG5cdFx0XHR2YXIgcmVzdWx0ID0gdGhpcy5DYWxsKGV4ZWMsIFIsIFtTXSk7XG5cdFx0XHRpZiAocmVzdWx0ID09PSBudWxsIHx8IHRoaXMuVHlwZShyZXN1bHQpID09PSAnT2JqZWN0Jykge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignXCJleGVjXCIgbWV0aG9kIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBPYmplY3QnKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlZ2V4RXhlYyhSLCBTKTtcblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy1hcnJheXNwZWNpZXNjcmVhdGVcblx0QXJyYXlTcGVjaWVzQ3JlYXRlOiBmdW5jdGlvbiBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7XG5cdFx0aWYgKCF0aGlzLklzSW50ZWdlcihsZW5ndGgpIHx8IGxlbmd0aCA8IDApIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGxlbmd0aCBtdXN0IGJlIGFuIGludGVnZXIgPj0gMCcpO1xuXHRcdH1cblx0XHR2YXIgbGVuID0gbGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aDtcblx0XHR2YXIgQztcblx0XHR2YXIgaXNBcnJheSA9IHRoaXMuSXNBcnJheShvcmlnaW5hbEFycmF5KTtcblx0XHRpZiAoaXNBcnJheSkge1xuXHRcdFx0QyA9IHRoaXMuR2V0KG9yaWdpbmFsQXJyYXksICdjb25zdHJ1Y3RvcicpO1xuXHRcdFx0Ly8gVE9ETzogZmlndXJlIG91dCBob3cgdG8gbWFrZSBhIGNyb3NzLXJlYWxtIG5vcm1hbCBBcnJheSwgYSBzYW1lLXJlYWxtIEFycmF5XG5cdFx0XHQvLyBpZiAodGhpcy5Jc0NvbnN0cnVjdG9yKEMpKSB7XG5cdFx0XHQvLyBcdGlmIEMgaXMgYW5vdGhlciByZWFsbSdzIEFycmF5LCBDID0gdW5kZWZpbmVkXG5cdFx0XHQvLyBcdE9iamVjdC5nZXRQcm90b3R5cGVPZihPYmplY3QuZ2V0UHJvdG90eXBlT2YoT2JqZWN0LmdldFByb3RvdHlwZU9mKEFycmF5KSkpID09PSBudWxsID9cblx0XHRcdC8vIH1cblx0XHRcdGlmICh0aGlzLlR5cGUoQykgPT09ICdPYmplY3QnICYmIGhhc1N5bWJvbHMgJiYgU3ltYm9sLnNwZWNpZXMpIHtcblx0XHRcdFx0QyA9IHRoaXMuR2V0KEMsIFN5bWJvbC5zcGVjaWVzKTtcblx0XHRcdFx0aWYgKEMgPT09IG51bGwpIHtcblx0XHRcdFx0XHRDID0gdm9pZCAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgQyA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBBcnJheShsZW4pO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuSXNDb25zdHJ1Y3RvcihDKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQyBtdXN0IGJlIGEgY29uc3RydWN0b3InKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBDKGxlbik7IC8vIHRoaXMuQ29uc3RydWN0KEMsIGxlbik7XG5cdH0sXG5cblx0Q3JlYXRlRGF0YVByb3BlcnR5OiBmdW5jdGlvbiBDcmVhdGVEYXRhUHJvcGVydHkoTywgUCwgVikge1xuXHRcdGlmICh0aGlzLlR5cGUoTykgIT09ICdPYmplY3QnKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKE8pIGlzIG5vdCBPYmplY3QnKTtcblx0XHR9XG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlLZXkoUCkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IElzUHJvcGVydHlLZXkoUCkgaXMgbm90IHRydWUnKTtcblx0XHR9XG5cdFx0dmFyIG9sZERlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuXHRcdHZhciBleHRlbnNpYmxlID0gb2xkRGVzYyB8fCAodHlwZW9mIE9iamVjdC5pc0V4dGVuc2libGUgIT09ICdmdW5jdGlvbicgfHwgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKSk7XG5cdFx0dmFyIGltbXV0YWJsZSA9IG9sZERlc2MgJiYgKCFvbGREZXNjLndyaXRhYmxlIHx8ICFvbGREZXNjLmNvbmZpZ3VyYWJsZSk7XG5cdFx0aWYgKGltbXV0YWJsZSB8fCAhZXh0ZW5zaWJsZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR2YXIgbmV3RGVzYyA9IHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHR2YWx1ZTogVixcblx0XHRcdHdyaXRhYmxlOiB0cnVlXG5cdFx0fTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoTywgUCwgbmV3RGVzYyk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtY3JlYXRlZGF0YXByb3BlcnR5b3J0aHJvd1xuXHRDcmVhdGVEYXRhUHJvcGVydHlPclRocm93OiBmdW5jdGlvbiBDcmVhdGVEYXRhUHJvcGVydHlPclRocm93KE8sIFAsIFYpIHtcblx0XHRpZiAodGhpcy5UeXBlKE8pICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogVHlwZShPKSBpcyBub3QgT2JqZWN0Jyk7XG5cdFx0fVxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5S2V5KFApKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBJc1Byb3BlcnR5S2V5KFApIGlzIG5vdCB0cnVlJyk7XG5cdFx0fVxuXHRcdHZhciBzdWNjZXNzID0gdGhpcy5DcmVhdGVEYXRhUHJvcGVydHkoTywgUCwgVik7XG5cdFx0aWYgKCFzdWNjZXNzKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmFibGUgdG8gY3JlYXRlIGRhdGEgcHJvcGVydHknKTtcblx0XHR9XG5cdFx0cmV0dXJuIHN1Y2Nlc3M7XG5cdH0sXG5cblx0Ly8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5cdEFkdmFuY2VTdHJpbmdJbmRleDogZnVuY3Rpb24gQWR2YW5jZVN0cmluZ0luZGV4KFMsIGluZGV4LCB1bmljb2RlKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShTKSAhPT0gJ1N0cmluZycpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IFR5cGUoUykgaXMgbm90IFN0cmluZycpO1xuXHRcdH1cblx0XHRpZiAoIXRoaXMuSXNJbnRlZ2VyKGluZGV4KSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignQXNzZXJ0aW9uIGZhaWxlZDogbGVuZ3RoIG11c3QgYmUgYW4gaW50ZWdlciA+PSAwIGFuZCA8PSAoMioqNTMgLSAxKScpO1xuXHRcdH1cblx0XHRpZiAoaW5kZXggPCAwIHx8IGluZGV4ID4gTUFYX1NBRkVfSU5URUdFUikge1xuXHRcdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Fzc2VydGlvbiBmYWlsZWQ6IGxlbmd0aCBtdXN0IGJlIGFuIGludGVnZXIgPj0gMCBhbmQgPD0gKDIqKjUzIC0gMSknKTtcblx0XHR9XG5cdFx0aWYgKHRoaXMuVHlwZSh1bmljb2RlKSAhPT0gJ0Jvb2xlYW4nKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdBc3NlcnRpb24gZmFpbGVkOiBUeXBlKHVuaWNvZGUpIGlzIG5vdCBCb29sZWFuJyk7XG5cdFx0fVxuXHRcdGlmICghdW5pY29kZSkge1xuXHRcdFx0cmV0dXJuIGluZGV4ICsgMTtcblx0XHR9XG5cdFx0dmFyIGxlbmd0aCA9IFMubGVuZ3RoO1xuXHRcdGlmICgoaW5kZXggKyAxKSA+PSBsZW5ndGgpIHtcblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0fVxuXHRcdHZhciBmaXJzdCA9IFMuY2hhckNvZGVBdChpbmRleCk7XG5cdFx0aWYgKGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXggKyAxO1xuXHRcdH1cblx0XHR2YXIgc2Vjb25kID0gUy5jaGFyQ29kZUF0KGluZGV4ICsgMSk7XG5cdFx0aWYgKHNlY29uZCA8IDB4REMwMCB8fCBzZWNvbmQgPiAweERGRkYpIHtcblx0XHRcdHJldHVybiBpbmRleCArIDE7XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleCArIDI7XG5cdH1cbn0pO1xuXG5kZWxldGUgRVM2LkNoZWNrT2JqZWN0Q29lcmNpYmxlOyAvLyByZW5hbWVkIGluIEVTNiB0byBSZXF1aXJlT2JqZWN0Q29lcmNpYmxlXG5cbm1vZHVsZS5leHBvcnRzID0gRVM2O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVMyMDE1ID0gcmVxdWlyZSgnLi9lczIwMTUnKTtcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL2hlbHBlcnMvYXNzaWduJyk7XG5cbnZhciBFUzIwMTYgPSBhc3NpZ24oYXNzaWduKHt9LCBFUzIwMTUpLCB7XG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L2VjbWEyNjIvcHVsbC82MFxuXHRTYW1lVmFsdWVOb25OdW1iZXI6IGZ1bmN0aW9uIFNhbWVWYWx1ZU5vbk51bWJlcih4LCB5KSB7XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJyB8fCB0eXBlb2YgeCAhPT0gdHlwZW9mIHkpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1NhbWVWYWx1ZU5vbk51bWJlciByZXF1aXJlcyB0d28gbm9uLW51bWJlciB2YWx1ZXMgb2YgdGhlIHNhbWUgdHlwZS4nKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuU2FtZVZhbHVlKHgsIHkpO1xuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBFUzIwMTY7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciAkaXNOYU4gPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNOYU4nKTtcbnZhciAkaXNGaW5pdGUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNGaW5pdGUnKTtcblxudmFyIHNpZ24gPSByZXF1aXJlKCcuL2hlbHBlcnMvc2lnbicpO1xudmFyIG1vZCA9IHJlcXVpcmUoJy4vaGVscGVycy9tb2QnKTtcblxudmFyIElzQ2FsbGFibGUgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnZXMtdG8tcHJpbWl0aXZlL2VzNScpO1xuXG52YXIgaGFzID0gcmVxdWlyZSgnaGFzJyk7XG5cbi8vIGh0dHBzOi8vZXM1LmdpdGh1Yi5pby8jeDlcbnZhciBFUzUgPSB7XG5cdFRvUHJpbWl0aXZlOiB0b1ByaW1pdGl2ZSxcblxuXHRUb0Jvb2xlYW46IGZ1bmN0aW9uIFRvQm9vbGVhbih2YWx1ZSkge1xuXHRcdHJldHVybiAhIXZhbHVlO1xuXHR9LFxuXHRUb051bWJlcjogZnVuY3Rpb24gVG9OdW1iZXIodmFsdWUpIHtcblx0XHRyZXR1cm4gTnVtYmVyKHZhbHVlKTtcblx0fSxcblx0VG9JbnRlZ2VyOiBmdW5jdGlvbiBUb0ludGVnZXIodmFsdWUpIHtcblx0XHR2YXIgbnVtYmVyID0gdGhpcy5Ub051bWJlcih2YWx1ZSk7XG5cdFx0aWYgKCRpc05hTihudW1iZXIpKSB7IHJldHVybiAwOyB9XG5cdFx0aWYgKG51bWJlciA9PT0gMCB8fCAhJGlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIG51bWJlcjsgfVxuXHRcdHJldHVybiBzaWduKG51bWJlcikgKiBNYXRoLmZsb29yKE1hdGguYWJzKG51bWJlcikpO1xuXHR9LFxuXHRUb0ludDMyOiBmdW5jdGlvbiBUb0ludDMyKHgpIHtcblx0XHRyZXR1cm4gdGhpcy5Ub051bWJlcih4KSA+PiAwO1xuXHR9LFxuXHRUb1VpbnQzMjogZnVuY3Rpb24gVG9VaW50MzIoeCkge1xuXHRcdHJldHVybiB0aGlzLlRvTnVtYmVyKHgpID4+PiAwO1xuXHR9LFxuXHRUb1VpbnQxNjogZnVuY3Rpb24gVG9VaW50MTYodmFsdWUpIHtcblx0XHR2YXIgbnVtYmVyID0gdGhpcy5Ub051bWJlcih2YWx1ZSk7XG5cdFx0aWYgKCRpc05hTihudW1iZXIpIHx8IG51bWJlciA9PT0gMCB8fCAhJGlzRmluaXRlKG51bWJlcikpIHsgcmV0dXJuIDA7IH1cblx0XHR2YXIgcG9zSW50ID0gc2lnbihudW1iZXIpICogTWF0aC5mbG9vcihNYXRoLmFicyhudW1iZXIpKTtcblx0XHRyZXR1cm4gbW9kKHBvc0ludCwgMHgxMDAwMCk7XG5cdH0sXG5cdFRvU3RyaW5nOiBmdW5jdGlvbiBUb1N0cmluZyh2YWx1ZSkge1xuXHRcdHJldHVybiBTdHJpbmcodmFsdWUpO1xuXHR9LFxuXHRUb09iamVjdDogZnVuY3Rpb24gVG9PYmplY3QodmFsdWUpIHtcblx0XHR0aGlzLkNoZWNrT2JqZWN0Q29lcmNpYmxlKHZhbHVlKTtcblx0XHRyZXR1cm4gT2JqZWN0KHZhbHVlKTtcblx0fSxcblx0Q2hlY2tPYmplY3RDb2VyY2libGU6IGZ1bmN0aW9uIENoZWNrT2JqZWN0Q29lcmNpYmxlKHZhbHVlLCBvcHRNZXNzYWdlKSB7XG5cdFx0LyoganNoaW50IGVxbnVsbDp0cnVlICovXG5cdFx0aWYgKHZhbHVlID09IG51bGwpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3Iob3B0TWVzc2FnZSB8fCAnQ2Fubm90IGNhbGwgbWV0aG9kIG9uICcgKyB2YWx1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0SXNDYWxsYWJsZTogSXNDYWxsYWJsZSxcblx0U2FtZVZhbHVlOiBmdW5jdGlvbiBTYW1lVmFsdWUoeCwgeSkge1xuXHRcdGlmICh4ID09PSB5KSB7IC8vIDAgPT09IC0wLCBidXQgdGhleSBhcmUgbm90IGlkZW50aWNhbC5cblx0XHRcdGlmICh4ID09PSAwKSB7IHJldHVybiAxIC8geCA9PT0gMSAvIHk7IH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gJGlzTmFOKHgpICYmICRpc05hTih5KTtcblx0fSxcblxuXHQvLyBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNS4xLyNzZWMtOFxuXHRUeXBlOiBmdW5jdGlvbiBUeXBlKHgpIHtcblx0XHRpZiAoeCA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuICdOdWxsJztcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuICdVbmRlZmluZWQnO1xuXHRcdH1cblx0XHRpZiAodHlwZW9mIHggPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIHggPT09ICdvYmplY3QnKSB7XG5cdFx0XHRyZXR1cm4gJ09iamVjdCc7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcblx0XHRcdHJldHVybiAnTnVtYmVyJztcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB4ID09PSAnYm9vbGVhbicpIHtcblx0XHRcdHJldHVybiAnQm9vbGVhbic7XG5cdFx0fVxuXHRcdGlmICh0eXBlb2YgeCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdHJldHVybiAnU3RyaW5nJztcblx0XHR9XG5cdH0sXG5cblx0Ly8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNi4wLyNzZWMtcHJvcGVydHktZGVzY3JpcHRvci1zcGVjaWZpY2F0aW9uLXR5cGVcblx0SXNQcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIElzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpIHtcblx0XHRpZiAodGhpcy5UeXBlKERlc2MpICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHR2YXIgYWxsb3dlZCA9IHtcblx0XHRcdCdbW0NvbmZpZ3VyYWJsZV1dJzogdHJ1ZSxcblx0XHRcdCdbW0VudW1lcmFibGVdXSc6IHRydWUsXG5cdFx0XHQnW1tHZXRdXSc6IHRydWUsXG5cdFx0XHQnW1tTZXRdXSc6IHRydWUsXG5cdFx0XHQnW1tWYWx1ZV1dJzogdHJ1ZSxcblx0XHRcdCdbW1dyaXRhYmxlXV0nOiB0cnVlXG5cdFx0fTtcblx0XHQvLyBqc2NzOmRpc2FibGVcblx0XHRmb3IgKHZhciBrZXkgaW4gRGVzYykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cdFx0XHRpZiAoaGFzKERlc2MsIGtleSkgJiYgIWFsbG93ZWRba2V5XSkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdC8vIGpzY3M6ZW5hYmxlXG5cdFx0dmFyIGlzRGF0YSA9IGhhcyhEZXNjLCAnW1tWYWx1ZV1dJyk7XG5cdFx0dmFyIElzQWNjZXNzb3IgPSBoYXMoRGVzYywgJ1tbR2V0XV0nKSB8fCBoYXMoRGVzYywgJ1tbU2V0XV0nKTtcblx0XHRpZiAoaXNEYXRhICYmIElzQWNjZXNzb3IpIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3BlcnR5IERlc2NyaXB0b3JzIG1heSBub3QgYmUgYm90aCBhY2Nlc3NvciBhbmQgZGF0YSBkZXNjcmlwdG9ycycpO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEwLjFcblx0SXNBY2Nlc3NvckRlc2NyaXB0b3I6IGZ1bmN0aW9uIElzQWNjZXNzb3JEZXNjcmlwdG9yKERlc2MpIHtcblx0XHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdEZXNjIG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdFx0fVxuXG5cdFx0aWYgKCFoYXMoRGVzYywgJ1tbR2V0XV0nKSAmJiAhaGFzKERlc2MsICdbW1NldF1dJykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEwLjJcblx0SXNEYXRhRGVzY3JpcHRvcjogZnVuY3Rpb24gSXNEYXRhRGVzY3JpcHRvcihEZXNjKSB7XG5cdFx0aWYgKHR5cGVvZiBEZXNjID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdGlmICghdGhpcy5Jc1Byb3BlcnR5RGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignRGVzYyBtdXN0IGJlIGEgUHJvcGVydHkgRGVzY3JpcHRvcicpO1xuXHRcdH1cblxuXHRcdGlmICghaGFzKERlc2MsICdbW1ZhbHVlXV0nKSAmJiAhaGFzKERlc2MsICdbW1dyaXRhYmxlXV0nKSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguMTAuM1xuXHRJc0dlbmVyaWNEZXNjcmlwdG9yOiBmdW5jdGlvbiBJc0dlbmVyaWNEZXNjcmlwdG9yKERlc2MpIHtcblx0XHRpZiAodHlwZW9mIERlc2MgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdEZXNjIG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLklzQWNjZXNzb3JEZXNjcmlwdG9yKERlc2MpICYmICF0aGlzLklzRGF0YURlc2NyaXB0b3IoRGVzYykpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHQvLyBodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi81LjEvI3NlYy04LjEwLjRcblx0RnJvbVByb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gRnJvbVByb3BlcnR5RGVzY3JpcHRvcihEZXNjKSB7XG5cdFx0aWYgKHR5cGVvZiBEZXNjID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIERlc2M7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLklzUHJvcGVydHlEZXNjcmlwdG9yKERlc2MpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdEZXNjIG11c3QgYmUgYSBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuSXNEYXRhRGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0dmFsdWU6IERlc2NbJ1tbVmFsdWVdXSddLFxuXHRcdFx0XHR3cml0YWJsZTogISFEZXNjWydbW1dyaXRhYmxlXV0nXSxcblx0XHRcdFx0ZW51bWVyYWJsZTogISFEZXNjWydbW0VudW1lcmFibGVdXSddLFxuXHRcdFx0XHRjb25maWd1cmFibGU6ICEhRGVzY1snW1tDb25maWd1cmFibGVdXSddXG5cdFx0XHR9O1xuXHRcdH0gZWxzZSBpZiAodGhpcy5Jc0FjY2Vzc29yRGVzY3JpcHRvcihEZXNjKSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0Z2V0OiBEZXNjWydbW0dldF1dJ10sXG5cdFx0XHRcdHNldDogRGVzY1snW1tTZXRdXSddLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiAhIURlc2NbJ1tbRW51bWVyYWJsZV1dJ10sXG5cdFx0XHRcdGNvbmZpZ3VyYWJsZTogISFEZXNjWydbW0NvbmZpZ3VyYWJsZV1dJ11cblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Zyb21Qcm9wZXJ0eURlc2NyaXB0b3IgbXVzdCBiZSBjYWxsZWQgd2l0aCBhIGZ1bGx5IHBvcHVsYXRlZCBQcm9wZXJ0eSBEZXNjcmlwdG9yJyk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzUuMS8jc2VjLTguMTAuNVxuXHRUb1Byb3BlcnR5RGVzY3JpcHRvcjogZnVuY3Rpb24gVG9Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqKSB7XG5cdFx0aWYgKHRoaXMuVHlwZShPYmopICE9PSAnT2JqZWN0Jykge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignVG9Qcm9wZXJ0eURlc2NyaXB0b3IgcmVxdWlyZXMgYW4gb2JqZWN0Jyk7XG5cdFx0fVxuXG5cdFx0dmFyIGRlc2MgPSB7fTtcblx0XHRpZiAoaGFzKE9iaiwgJ2VudW1lcmFibGUnKSkge1xuXHRcdFx0ZGVzY1snW1tFbnVtZXJhYmxlXV0nXSA9IHRoaXMuVG9Cb29sZWFuKE9iai5lbnVtZXJhYmxlKTtcblx0XHR9XG5cdFx0aWYgKGhhcyhPYmosICdjb25maWd1cmFibGUnKSkge1xuXHRcdFx0ZGVzY1snW1tDb25maWd1cmFibGVdXSddID0gdGhpcy5Ub0Jvb2xlYW4oT2JqLmNvbmZpZ3VyYWJsZSk7XG5cdFx0fVxuXHRcdGlmIChoYXMoT2JqLCAndmFsdWUnKSkge1xuXHRcdFx0ZGVzY1snW1tWYWx1ZV1dJ10gPSBPYmoudmFsdWU7XG5cdFx0fVxuXHRcdGlmIChoYXMoT2JqLCAnd3JpdGFibGUnKSkge1xuXHRcdFx0ZGVzY1snW1tXcml0YWJsZV1dJ10gPSB0aGlzLlRvQm9vbGVhbihPYmoud3JpdGFibGUpO1xuXHRcdH1cblx0XHRpZiAoaGFzKE9iaiwgJ2dldCcpKSB7XG5cdFx0XHR2YXIgZ2V0dGVyID0gT2JqLmdldDtcblx0XHRcdGlmICh0eXBlb2YgZ2V0dGVyICE9PSAndW5kZWZpbmVkJyAmJiAhdGhpcy5Jc0NhbGxhYmxlKGdldHRlcikpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignZ2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdFx0fVxuXHRcdFx0ZGVzY1snW1tHZXRdXSddID0gZ2V0dGVyO1xuXHRcdH1cblx0XHRpZiAoaGFzKE9iaiwgJ3NldCcpKSB7XG5cdFx0XHR2YXIgc2V0dGVyID0gT2JqLnNldDtcblx0XHRcdGlmICh0eXBlb2Ygc2V0dGVyICE9PSAndW5kZWZpbmVkJyAmJiAhdGhpcy5Jc0NhbGxhYmxlKHNldHRlcikpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignc2V0dGVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuXHRcdFx0fVxuXHRcdFx0ZGVzY1snW1tTZXRdXSddID0gc2V0dGVyO1xuXHRcdH1cblxuXHRcdGlmICgoaGFzKGRlc2MsICdbW0dldF1dJykgfHwgaGFzKGRlc2MsICdbW1NldF1dJykpICYmIChoYXMoZGVzYywgJ1tbVmFsdWVdXScpIHx8IGhhcyhkZXNjLCAnW1tXcml0YWJsZV1dJykpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIHByb3BlcnR5IGRlc2NyaXB0b3IuIENhbm5vdCBib3RoIHNwZWNpZnkgYWNjZXNzb3JzIGFuZCBhIHZhbHVlIG9yIHdyaXRhYmxlIGF0dHJpYnV0ZScpO1xuXHRcdH1cblx0XHRyZXR1cm4gZGVzYztcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFUzU7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9lczIwMTYnKTtcbiIsInZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHtcblx0aWYgKE9iamVjdC5hc3NpZ24pIHtcblx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSk7XG5cdH1cblx0Zm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuXHRcdGlmIChoYXMuY2FsbChzb3VyY2UsIGtleSkpIHtcblx0XHRcdHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuIiwidmFyICRpc05hTiA9IE51bWJlci5pc05hTiB8fCBmdW5jdGlvbiAoYSkgeyByZXR1cm4gYSAhPT0gYTsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBOdW1iZXIuaXNGaW5pdGUgfHwgZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHR5cGVvZiB4ID09PSAnbnVtYmVyJyAmJiAhJGlzTmFOKHgpICYmIHggIT09IEluZmluaXR5ICYmIHggIT09IC1JbmZpbml0eTsgfTtcbiIsIm1vZHVsZS5leHBvcnRzID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIGlzTmFOKGEpIHtcblx0cmV0dXJuIGEgIT09IGE7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuXHRyZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1vZChudW1iZXIsIG1vZHVsbykge1xuXHR2YXIgcmVtYWluID0gbnVtYmVyICUgbW9kdWxvO1xuXHRyZXR1cm4gTWF0aC5mbG9vcihyZW1haW4gPj0gMCA/IHJlbWFpbiA6IHJlbWFpbiArIG1vZHVsbyk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzaWduKG51bWJlcikge1xuXHRyZXR1cm4gbnVtYmVyID49IDAgPyAxIDogLTE7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcblxudmFyIGlzQ2FsbGFibGUgPSByZXF1aXJlKCdpcy1jYWxsYWJsZScpO1xuXG4vLyBodHRwczovL2VzNS5naXRodWIuaW8vI3g4LjEyXG52YXIgRVM1aW50ZXJuYWxTbG90cyA9IHtcblx0J1tbRGVmYXVsdFZhbHVlXV0nOiBmdW5jdGlvbiAoTywgaGludCkge1xuXHRcdHZhciBhY3R1YWxIaW50ID0gaGludCB8fCAodG9TdHIuY2FsbChPKSA9PT0gJ1tvYmplY3QgRGF0ZV0nID8gU3RyaW5nIDogTnVtYmVyKTtcblxuXHRcdGlmIChhY3R1YWxIaW50ID09PSBTdHJpbmcgfHwgYWN0dWFsSGludCA9PT0gTnVtYmVyKSB7XG5cdFx0XHR2YXIgbWV0aG9kcyA9IGFjdHVhbEhpbnQgPT09IFN0cmluZyA/IFsndG9TdHJpbmcnLCAndmFsdWVPZiddIDogWyd2YWx1ZU9mJywgJ3RvU3RyaW5nJ107XG5cdFx0XHR2YXIgdmFsdWUsIGk7XG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgbWV0aG9kcy5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHRpZiAoaXNDYWxsYWJsZShPW21ldGhvZHNbaV1dKSkge1xuXHRcdFx0XHRcdHZhbHVlID0gT1ttZXRob2RzW2ldXSgpO1xuXHRcdFx0XHRcdGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHtcblx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIGRlZmF1bHQgdmFsdWUnKTtcblx0XHR9XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaW52YWxpZCBbW0RlZmF1bHRWYWx1ZV1dIGhpbnQgc3VwcGxpZWQnKTtcblx0fVxufTtcblxuLy8gaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4OVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCwgUHJlZmVycmVkVHlwZSkge1xuXHRpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cdHJldHVybiBFUzVpbnRlcm5hbFNsb3RzWydbW0RlZmF1bHRWYWx1ZV1dJ10oaW5wdXQsIFByZWZlcnJlZFR5cGUpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnO1xuXG52YXIgaXNQcmltaXRpdmUgPSByZXF1aXJlKCcuL2hlbHBlcnMvaXNQcmltaXRpdmUnKTtcbnZhciBpc0NhbGxhYmxlID0gcmVxdWlyZSgnaXMtY2FsbGFibGUnKTtcbnZhciBpc0RhdGUgPSByZXF1aXJlKCdpcy1kYXRlLW9iamVjdCcpO1xudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnaXMtc3ltYm9sJyk7XG5cbnZhciBvcmRpbmFyeVRvUHJpbWl0aXZlID0gZnVuY3Rpb24gT3JkaW5hcnlUb1ByaW1pdGl2ZShPLCBoaW50KSB7XG5cdGlmICh0eXBlb2YgTyA9PT0gJ3VuZGVmaW5lZCcgfHwgTyA9PT0gbnVsbCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCBjYWxsIG1ldGhvZCBvbiAnICsgTyk7XG5cdH1cblx0aWYgKHR5cGVvZiBoaW50ICE9PSAnc3RyaW5nJyB8fCAoaGludCAhPT0gJ251bWJlcicgJiYgaGludCAhPT0gJ3N0cmluZycpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignaGludCBtdXN0IGJlIFwic3RyaW5nXCIgb3IgXCJudW1iZXJcIicpO1xuXHR9XG5cdHZhciBtZXRob2ROYW1lcyA9IGhpbnQgPT09ICdzdHJpbmcnID8gWyd0b1N0cmluZycsICd2YWx1ZU9mJ10gOiBbJ3ZhbHVlT2YnLCAndG9TdHJpbmcnXTtcblx0dmFyIG1ldGhvZCwgcmVzdWx0LCBpO1xuXHRmb3IgKGkgPSAwOyBpIDwgbWV0aG9kTmFtZXMubGVuZ3RoOyArK2kpIHtcblx0XHRtZXRob2QgPSBPW21ldGhvZE5hbWVzW2ldXTtcblx0XHRpZiAoaXNDYWxsYWJsZShtZXRob2QpKSB7XG5cdFx0XHRyZXN1bHQgPSBtZXRob2QuY2FsbChPKTtcblx0XHRcdGlmIChpc1ByaW1pdGl2ZShyZXN1bHQpKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHRocm93IG5ldyBUeXBlRXJyb3IoJ05vIGRlZmF1bHQgdmFsdWUnKTtcbn07XG5cbnZhciBHZXRNZXRob2QgPSBmdW5jdGlvbiBHZXRNZXRob2QoTywgUCkge1xuXHR2YXIgZnVuYyA9IE9bUF07XG5cdGlmIChmdW5jICE9PSBudWxsICYmIHR5cGVvZiBmdW5jICE9PSAndW5kZWZpbmVkJykge1xuXHRcdGlmICghaXNDYWxsYWJsZShmdW5jKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihmdW5jICsgJyByZXR1cm5lZCBmb3IgcHJvcGVydHkgJyArIFAgKyAnIG9mIG9iamVjdCAnICsgTyArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZ1bmM7XG5cdH1cbn07XG5cbi8vIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi82LjAvI3NlYy10b3ByaW1pdGl2ZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBUb1ByaW1pdGl2ZShpbnB1dCwgUHJlZmVycmVkVHlwZSkge1xuXHRpZiAoaXNQcmltaXRpdmUoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG5cdHZhciBoaW50ID0gJ2RlZmF1bHQnO1xuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRpZiAoUHJlZmVycmVkVHlwZSA9PT0gU3RyaW5nKSB7XG5cdFx0XHRoaW50ID0gJ3N0cmluZyc7XG5cdFx0fSBlbHNlIGlmIChQcmVmZXJyZWRUeXBlID09PSBOdW1iZXIpIHtcblx0XHRcdGhpbnQgPSAnbnVtYmVyJztcblx0XHR9XG5cdH1cblxuXHR2YXIgZXhvdGljVG9QcmltO1xuXHRpZiAoaGFzU3ltYm9scykge1xuXHRcdGlmIChTeW1ib2wudG9QcmltaXRpdmUpIHtcblx0XHRcdGV4b3RpY1RvUHJpbSA9IEdldE1ldGhvZChpbnB1dCwgU3ltYm9sLnRvUHJpbWl0aXZlKTtcblx0XHR9IGVsc2UgaWYgKGlzU3ltYm9sKGlucHV0KSkge1xuXHRcdFx0ZXhvdGljVG9QcmltID0gU3ltYm9sLnByb3RvdHlwZS52YWx1ZU9mO1xuXHRcdH1cblx0fVxuXHRpZiAodHlwZW9mIGV4b3RpY1RvUHJpbSAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHR2YXIgcmVzdWx0ID0gZXhvdGljVG9QcmltLmNhbGwoaW5wdXQsIGhpbnQpO1xuXHRcdGlmIChpc1ByaW1pdGl2ZShyZXN1bHQpKSB7XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmFibGUgdG8gY29udmVydCBleG90aWMgb2JqZWN0IHRvIHByaW1pdGl2ZScpO1xuXHR9XG5cdGlmIChoaW50ID09PSAnZGVmYXVsdCcgJiYgKGlzRGF0ZShpbnB1dCkgfHwgaXNTeW1ib2woaW5wdXQpKSkge1xuXHRcdGhpbnQgPSAnc3RyaW5nJztcblx0fVxuXHRyZXR1cm4gb3JkaW5hcnlUb1ByaW1pdGl2ZShpbnB1dCwgaGludCA9PT0gJ2RlZmF1bHQnID8gJ251bWJlcicgOiBoaW50KTtcbn07XG4iLCJcbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmb3JFYWNoIChvYmosIGZuLCBjdHgpIHtcbiAgICBpZiAodG9TdHJpbmcuY2FsbChmbikgIT09ICdbb2JqZWN0IEZ1bmN0aW9uXScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuICAgIHZhciBsID0gb2JqLmxlbmd0aDtcbiAgICBpZiAobCA9PT0gK2wpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGZuLmNhbGwoY3R4LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBrIGluIG9iaikge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKG9iaiwgaykpIHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGN0eCwgb2JqW2tdLCBrLCBvYmopO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKiBlc2xpbnQgbm8taW52YWxpZC10aGlzOiAxICovXG5cbnZhciBFUlJPUl9NRVNTQUdFID0gJ0Z1bmN0aW9uLnByb3RvdHlwZS5iaW5kIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgJztcbnZhciBzbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZnVuY1R5cGUgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmNhbGwodGFyZ2V0KSAhPT0gZnVuY1R5cGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihFUlJPUl9NRVNTQUdFICsgdGFyZ2V0KTtcbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG5cbiAgICB2YXIgYm91bmQ7XG4gICAgdmFyIGJpbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IE1hdGgubWF4KDAsIHRhcmdldC5sZW5ndGggLSBhcmdzLmxlbmd0aCk7XG4gICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm91bmRMZW5ndGg7IGkrKykge1xuICAgICAgICBib3VuZEFyZ3MucHVzaCgnJCcgKyBpKTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgYm91bmRBcmdzLmpvaW4oJywnKSArICcpeyByZXR1cm4gYmluZGVyLmFwcGx5KHRoaXMsYXJndW1lbnRzKTsgfScpKGJpbmRlcik7XG5cbiAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICB2YXIgRW1wdHkgPSBmdW5jdGlvbiBFbXB0eSgpIHt9O1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSB0YXJnZXQucHJvdG90eXBlO1xuICAgICAgICBib3VuZC5wcm90b3R5cGUgPSBuZXcgRW1wdHkoKTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gYm91bmQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuL2ltcGxlbWVudGF0aW9uJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgfHwgaW1wbGVtZW50YXRpb247XG4iLCJ2YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBmblRvU3RyID0gRnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nO1xuXG52YXIgY29uc3RydWN0b3JSZWdleCA9IC9eXFxzKmNsYXNzIC87XG52YXIgaXNFUzZDbGFzc0ZuID0gZnVuY3Rpb24gaXNFUzZDbGFzc0ZuKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0dmFyIGZuU3RyID0gZm5Ub1N0ci5jYWxsKHZhbHVlKTtcblx0XHR2YXIgc2luZ2xlU3RyaXBwZWQgPSBmblN0ci5yZXBsYWNlKC9cXC9cXC8uKlxcbi9nLCAnJyk7XG5cdFx0dmFyIG11bHRpU3RyaXBwZWQgPSBzaW5nbGVTdHJpcHBlZC5yZXBsYWNlKC9cXC9cXCpbLlxcc1xcU10qXFwqXFwvL2csICcnKTtcblx0XHR2YXIgc3BhY2VTdHJpcHBlZCA9IG11bHRpU3RyaXBwZWQucmVwbGFjZSgvXFxuL21nLCAnICcpLnJlcGxhY2UoLyB7Mn0vZywgJyAnKTtcblx0XHRyZXR1cm4gY29uc3RydWN0b3JSZWdleC50ZXN0KHNwYWNlU3RyaXBwZWQpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlOyAvLyBub3QgYSBmdW5jdGlvblxuXHR9XG59O1xuXG52YXIgdHJ5RnVuY3Rpb25PYmplY3QgPSBmdW5jdGlvbiB0cnlGdW5jdGlvbk9iamVjdCh2YWx1ZSkge1xuXHR0cnkge1xuXHRcdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdGZuVG9TdHIuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZuQ2xhc3MgPSAnW29iamVjdCBGdW5jdGlvbl0nO1xudmFyIGdlbkNsYXNzID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJztcbnZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC50b1N0cmluZ1RhZyA9PT0gJ3N5bWJvbCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNDYWxsYWJsZSh2YWx1ZSkge1xuXHRpZiAoIXZhbHVlKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChoYXNUb1N0cmluZ1RhZykgeyByZXR1cm4gdHJ5RnVuY3Rpb25PYmplY3QodmFsdWUpOyB9XG5cdGlmIChpc0VTNkNsYXNzRm4odmFsdWUpKSB7IHJldHVybiBmYWxzZTsgfVxuXHR2YXIgc3RyQ2xhc3MgPSB0b1N0ci5jYWxsKHZhbHVlKTtcblx0cmV0dXJuIHN0ckNsYXNzID09PSBmbkNsYXNzIHx8IHN0ckNsYXNzID09PSBnZW5DbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBnZXREYXkgPSBEYXRlLnByb3RvdHlwZS5nZXREYXk7XG52YXIgdHJ5RGF0ZU9iamVjdCA9IGZ1bmN0aW9uIHRyeURhdGVPYmplY3QodmFsdWUpIHtcblx0dHJ5IHtcblx0XHRnZXREYXkuY2FsbCh2YWx1ZSk7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgZGF0ZUNsYXNzID0gJ1tvYmplY3QgRGF0ZV0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0RhdGVPYmplY3QodmFsdWUpIHtcblx0aWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdHJldHVybiBoYXNUb1N0cmluZ1RhZyA/IHRyeURhdGVPYmplY3QodmFsdWUpIDogdG9TdHIuY2FsbCh2YWx1ZSkgPT09IGRhdGVDbGFzcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciByZWdleEV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbnZhciB0cnlSZWdleEV4ZWNDYWxsID0gZnVuY3Rpb24gdHJ5UmVnZXhFeGVjKHZhbHVlKSB7XG5cdHRyeSB7XG5cdFx0dmFyIGxhc3RJbmRleCA9IHZhbHVlLmxhc3RJbmRleDtcblx0XHR2YWx1ZS5sYXN0SW5kZXggPSAwO1xuXG5cdFx0cmVnZXhFeGVjLmNhbGwodmFsdWUpO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9IGZpbmFsbHkge1xuXHRcdHZhbHVlLmxhc3RJbmRleCA9IGxhc3RJbmRleDtcblx0fVxufTtcbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgcmVnZXhDbGFzcyA9ICdbb2JqZWN0IFJlZ0V4cF0nO1xudmFyIGhhc1RvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc1JlZ2V4KHZhbHVlKSB7XG5cdGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoIWhhc1RvU3RyaW5nVGFnKSB7XG5cdFx0cmV0dXJuIHRvU3RyLmNhbGwodmFsdWUpID09PSByZWdleENsYXNzO1xuXHR9XG5cblx0dmFyIGRlc2NyaXB0b3IgPSBnT1BEKHZhbHVlLCAnbGFzdEluZGV4Jyk7XG5cdHZhciBoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkgPSBkZXNjcmlwdG9yICYmIGhhcyhkZXNjcmlwdG9yLCAndmFsdWUnKTtcblx0aWYgKCFoYXNMYXN0SW5kZXhEYXRhUHJvcGVydHkpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRyZXR1cm4gdHJ5UmVnZXhFeGVjQ2FsbCh2YWx1ZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGhhc1N5bWJvbHMgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2woKSA9PT0gJ3N5bWJvbCc7XG5cbmlmIChoYXNTeW1ib2xzKSB7XG5cdHZhciBzeW1Ub1N0ciA9IFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmc7XG5cdHZhciBzeW1TdHJpbmdSZWdleCA9IC9eU3ltYm9sXFwoLipcXCkkLztcblx0dmFyIGlzU3ltYm9sT2JqZWN0ID0gZnVuY3Rpb24gaXNTeW1ib2xPYmplY3QodmFsdWUpIHtcblx0XHRpZiAodHlwZW9mIHZhbHVlLnZhbHVlT2YoKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdFx0cmV0dXJuIHN5bVN0cmluZ1JlZ2V4LnRlc3Qoc3ltVG9TdHIuY2FsbCh2YWx1ZSkpO1xuXHR9O1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcpIHsgcmV0dXJuIHRydWU7IH1cblx0XHRpZiAodG9TdHIuY2FsbCh2YWx1ZSkgIT09ICdbb2JqZWN0IFN5bWJvbF0nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRcdHRyeSB7XG5cdFx0XHRyZXR1cm4gaXNTeW1ib2xPYmplY3QodmFsdWUpO1xuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH07XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG5cdFx0Ly8gdGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IFN5bWJvbHMuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBtb2RpZmllZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9lcy1zaGltcy9lczUtc2hpbVxudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHNsaWNlID0gQXJyYXkucHJvdG90eXBlLnNsaWNlO1xudmFyIGlzQXJncyA9IHJlcXVpcmUoJy4vaXNBcmd1bWVudHMnKTtcbnZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGhhc0RvbnRFbnVtQnVnID0gIWlzRW51bWVyYWJsZS5jYWxsKHsgdG9TdHJpbmc6IG51bGwgfSwgJ3RvU3RyaW5nJyk7XG52YXIgaGFzUHJvdG9FbnVtQnVnID0gaXNFbnVtZXJhYmxlLmNhbGwoZnVuY3Rpb24gKCkge30sICdwcm90b3R5cGUnKTtcbnZhciBkb250RW51bXMgPSBbXG5cdCd0b1N0cmluZycsXG5cdCd0b0xvY2FsZVN0cmluZycsXG5cdCd2YWx1ZU9mJyxcblx0J2hhc093blByb3BlcnR5Jyxcblx0J2lzUHJvdG90eXBlT2YnLFxuXHQncHJvcGVydHlJc0VudW1lcmFibGUnLFxuXHQnY29uc3RydWN0b3InXG5dO1xudmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlID0gZnVuY3Rpb24gKG8pIHtcblx0dmFyIGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuXHRyZXR1cm4gY3RvciAmJiBjdG9yLnByb3RvdHlwZSA9PT0gbztcbn07XG52YXIgZXhjbHVkZWRLZXlzID0ge1xuXHQkY29uc29sZTogdHJ1ZSxcblx0JGV4dGVybmFsOiB0cnVlLFxuXHQkZnJhbWU6IHRydWUsXG5cdCRmcmFtZUVsZW1lbnQ6IHRydWUsXG5cdCRmcmFtZXM6IHRydWUsXG5cdCRpbm5lckhlaWdodDogdHJ1ZSxcblx0JGlubmVyV2lkdGg6IHRydWUsXG5cdCRvdXRlckhlaWdodDogdHJ1ZSxcblx0JG91dGVyV2lkdGg6IHRydWUsXG5cdCRwYWdlWE9mZnNldDogdHJ1ZSxcblx0JHBhZ2VZT2Zmc2V0OiB0cnVlLFxuXHQkcGFyZW50OiB0cnVlLFxuXHQkc2Nyb2xsTGVmdDogdHJ1ZSxcblx0JHNjcm9sbFRvcDogdHJ1ZSxcblx0JHNjcm9sbFg6IHRydWUsXG5cdCRzY3JvbGxZOiB0cnVlLFxuXHQkc2VsZjogdHJ1ZSxcblx0JHdlYmtpdEluZGV4ZWREQjogdHJ1ZSxcblx0JHdlYmtpdFN0b3JhZ2VJbmZvOiB0cnVlLFxuXHQkd2luZG93OiB0cnVlXG59O1xudmFyIGhhc0F1dG9tYXRpb25FcXVhbGl0eUJ1ZyA9IChmdW5jdGlvbiAoKSB7XG5cdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7IHJldHVybiBmYWxzZTsgfVxuXHRmb3IgKHZhciBrIGluIHdpbmRvdykge1xuXHRcdHRyeSB7XG5cdFx0XHRpZiAoIWV4Y2x1ZGVkS2V5c1snJCcgKyBrXSAmJiBoYXMuY2FsbCh3aW5kb3csIGspICYmIHdpbmRvd1trXSAhPT0gbnVsbCAmJiB0eXBlb2Ygd2luZG93W2tdID09PSAnb2JqZWN0Jykge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlKHdpbmRvd1trXSk7XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZmFsc2U7XG59KCkpO1xudmFyIGVxdWFsc0NvbnN0cnVjdG9yUHJvdG90eXBlSWZOb3RCdWdneSA9IGZ1bmN0aW9uIChvKSB7XG5cdC8qIGdsb2JhbCB3aW5kb3cgKi9cblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnIHx8ICFoYXNBdXRvbWF0aW9uRXF1YWxpdHlCdWcpIHtcblx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdH1cblx0dHJ5IHtcblx0XHRyZXR1cm4gZXF1YWxzQ29uc3RydWN0b3JQcm90b3R5cGUobyk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn07XG5cbnZhciBrZXlzU2hpbSA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG5cdHZhciBpc09iamVjdCA9IG9iamVjdCAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0ID09PSAnb2JqZWN0Jztcblx0dmFyIGlzRnVuY3Rpb24gPSB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cdHZhciBpc0FyZ3VtZW50cyA9IGlzQXJncyhvYmplY3QpO1xuXHR2YXIgaXNTdHJpbmcgPSBpc09iamVjdCAmJiB0b1N0ci5jYWxsKG9iamVjdCkgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuXHR2YXIgdGhlS2V5cyA9IFtdO1xuXG5cdGlmICghaXNPYmplY3QgJiYgIWlzRnVuY3Rpb24gJiYgIWlzQXJndW1lbnRzKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmtleXMgY2FsbGVkIG9uIGEgbm9uLW9iamVjdCcpO1xuXHR9XG5cblx0dmFyIHNraXBQcm90byA9IGhhc1Byb3RvRW51bUJ1ZyAmJiBpc0Z1bmN0aW9uO1xuXHRpZiAoaXNTdHJpbmcgJiYgb2JqZWN0Lmxlbmd0aCA+IDAgJiYgIWhhcy5jYWxsKG9iamVjdCwgMCkpIHtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdC5sZW5ndGg7ICsraSkge1xuXHRcdFx0dGhlS2V5cy5wdXNoKFN0cmluZyhpKSk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKGlzQXJndW1lbnRzICYmIG9iamVjdC5sZW5ndGggPiAwKSB7XG5cdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBvYmplY3QubGVuZ3RoOyArK2opIHtcblx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcoaikpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRmb3IgKHZhciBuYW1lIGluIG9iamVjdCkge1xuXHRcdFx0aWYgKCEoc2tpcFByb3RvICYmIG5hbWUgPT09ICdwcm90b3R5cGUnKSAmJiBoYXMuY2FsbChvYmplY3QsIG5hbWUpKSB7XG5cdFx0XHRcdHRoZUtleXMucHVzaChTdHJpbmcobmFtZSkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmIChoYXNEb250RW51bUJ1Zykge1xuXHRcdHZhciBza2lwQ29uc3RydWN0b3IgPSBlcXVhbHNDb25zdHJ1Y3RvclByb3RvdHlwZUlmTm90QnVnZ3kob2JqZWN0KTtcblxuXHRcdGZvciAodmFyIGsgPSAwOyBrIDwgZG9udEVudW1zLmxlbmd0aDsgKytrKSB7XG5cdFx0XHRpZiAoIShza2lwQ29uc3RydWN0b3IgJiYgZG9udEVudW1zW2tdID09PSAnY29uc3RydWN0b3InKSAmJiBoYXMuY2FsbChvYmplY3QsIGRvbnRFbnVtc1trXSkpIHtcblx0XHRcdFx0dGhlS2V5cy5wdXNoKGRvbnRFbnVtc1trXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB0aGVLZXlzO1xufTtcblxua2V5c1NoaW0uc2hpbSA9IGZ1bmN0aW9uIHNoaW1PYmplY3RLZXlzKCkge1xuXHRpZiAoT2JqZWN0LmtleXMpIHtcblx0XHR2YXIga2V5c1dvcmtzV2l0aEFyZ3VtZW50cyA9IChmdW5jdGlvbiAoKSB7XG5cdFx0XHQvLyBTYWZhcmkgNS4wIGJ1Z1xuXHRcdFx0cmV0dXJuIChPYmplY3Qua2V5cyhhcmd1bWVudHMpIHx8ICcnKS5sZW5ndGggPT09IDI7XG5cdFx0fSgxLCAyKSk7XG5cdFx0aWYgKCFrZXlzV29ya3NXaXRoQXJndW1lbnRzKSB7XG5cdFx0XHR2YXIgb3JpZ2luYWxLZXlzID0gT2JqZWN0LmtleXM7XG5cdFx0XHRPYmplY3Qua2V5cyA9IGZ1bmN0aW9uIGtleXMob2JqZWN0KSB7XG5cdFx0XHRcdGlmIChpc0FyZ3Mob2JqZWN0KSkge1xuXHRcdFx0XHRcdHJldHVybiBvcmlnaW5hbEtleXMoc2xpY2UuY2FsbChvYmplY3QpKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRyZXR1cm4gb3JpZ2luYWxLZXlzKG9iamVjdCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdE9iamVjdC5rZXlzID0ga2V5c1NoaW07XG5cdH1cblx0cmV0dXJuIE9iamVjdC5rZXlzIHx8IGtleXNTaGltO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBrZXlzU2hpbTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0FyZ3VtZW50cyh2YWx1ZSkge1xuXHR2YXIgc3RyID0gdG9TdHIuY2FsbCh2YWx1ZSk7XG5cdHZhciBpc0FyZ3MgPSBzdHIgPT09ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXHRpZiAoIWlzQXJncykge1xuXHRcdGlzQXJncyA9IHN0ciAhPT0gJ1tvYmplY3QgQXJyYXldJyAmJlxuXHRcdFx0dmFsdWUgIT09IG51bGwgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiZcblx0XHRcdHR5cGVvZiB2YWx1ZS5sZW5ndGggPT09ICdudW1iZXInICYmXG5cdFx0XHR2YWx1ZS5sZW5ndGggPj0gMCAmJlxuXHRcdFx0dG9TdHIuY2FsbCh2YWx1ZS5jYWxsZWUpID09PSAnW29iamVjdCBGdW5jdGlvbl0nO1xuXHR9XG5cdHJldHVybiBpc0FyZ3M7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRVMgPSByZXF1aXJlKCdlcy1hYnN0cmFjdC9lczcnKTtcbnZhciBoYXMgPSByZXF1aXJlKCdoYXMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIGlzRW51bWVyYWJsZSA9IGJpbmQuY2FsbChGdW5jdGlvbi5jYWxsLCBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB2YWx1ZXMoTykge1xuXHR2YXIgb2JqID0gRVMuUmVxdWlyZU9iamVjdENvZXJjaWJsZShPKTtcblx0dmFyIHZhbHMgPSBbXTtcblx0Zm9yICh2YXIga2V5IGluIG9iaikge1xuXHRcdGlmIChoYXMob2JqLCBrZXkpICYmIGlzRW51bWVyYWJsZShvYmosIGtleSkpIHtcblx0XHRcdHZhbHMucHVzaChvYmpba2V5XSk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWxzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcbnZhciBnZXRQb2x5ZmlsbCA9IHJlcXVpcmUoJy4vcG9seWZpbGwnKTtcbnZhciBzaGltID0gcmVxdWlyZSgnLi9zaGltJyk7XG5cbnZhciBwb2x5ZmlsbCA9IGdldFBvbHlmaWxsKCk7XG5cbmRlZmluZShwb2x5ZmlsbCwge1xuXHRnZXRQb2x5ZmlsbDogZ2V0UG9seWZpbGwsXG5cdGltcGxlbWVudGF0aW9uOiBpbXBsZW1lbnRhdGlvbixcblx0c2hpbTogc2hpbVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gcG9seWZpbGw7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBpbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4vaW1wbGVtZW50YXRpb24nKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQb2x5ZmlsbCgpIHtcblx0cmV0dXJuIHR5cGVvZiBPYmplY3QudmFsdWVzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LnZhbHVlcyA6IGltcGxlbWVudGF0aW9uO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGdldFBvbHlmaWxsID0gcmVxdWlyZSgnLi9wb2x5ZmlsbCcpO1xudmFyIGRlZmluZSA9IHJlcXVpcmUoJ2RlZmluZS1wcm9wZXJ0aWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2hpbVZhbHVlcygpIHtcblx0dmFyIHBvbHlmaWxsID0gZ2V0UG9seWZpbGwoKTtcblx0ZGVmaW5lKE9iamVjdCwgeyB2YWx1ZXM6IHBvbHlmaWxsIH0sIHtcblx0XHR2YWx1ZXM6IGZ1bmN0aW9uIHRlc3RWYWx1ZXMoKSB7XG5cdFx0XHRyZXR1cm4gT2JqZWN0LnZhbHVlcyAhPT0gcG9seWZpbGw7XG5cdFx0fVxuXHR9KTtcblx0cmV0dXJuIHBvbHlmaWxsO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL2luY2x1ZGVzIHYwLjIuMCBieSBAbWF0aGlhcyAqL1xuaWYgKCFTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKSB7XG5cdChmdW5jdGlvbigpIHtcblx0XHQndXNlIHN0cmljdCc7IC8vIG5lZWRlZCB0byBzdXBwb3J0IGBhcHBseWAvYGNhbGxgIHdpdGggYHVuZGVmaW5lZGAvYG51bGxgXG5cdFx0dmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cdFx0dmFyIGRlZmluZVByb3BlcnR5ID0gKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gSUUgOCBvbmx5IHN1cHBvcnRzIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG9uIERPTSBlbGVtZW50c1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dmFyIG9iamVjdCA9IHt9O1xuXHRcdFx0XHR2YXIgJGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gJGRlZmluZVByb3BlcnR5KG9iamVjdCwgb2JqZWN0LCBvYmplY3QpICYmICRkZWZpbmVQcm9wZXJ0eTtcblx0XHRcdH0gY2F0Y2goZXJyb3IpIHt9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0oKSk7XG5cdFx0dmFyIGluZGV4T2YgPSAnJy5pbmRleE9mO1xuXHRcdHZhciBpbmNsdWRlcyA9IGZ1bmN0aW9uKHNlYXJjaCkge1xuXHRcdFx0aWYgKHRoaXMgPT0gbnVsbCkge1xuXHRcdFx0XHR0aHJvdyBUeXBlRXJyb3IoKTtcblx0XHRcdH1cblx0XHRcdHZhciBzdHJpbmcgPSBTdHJpbmcodGhpcyk7XG5cdFx0XHRpZiAoc2VhcmNoICYmIHRvU3RyaW5nLmNhbGwoc2VhcmNoKSA9PSAnW29iamVjdCBSZWdFeHBdJykge1xuXHRcdFx0XHR0aHJvdyBUeXBlRXJyb3IoKTtcblx0XHRcdH1cblx0XHRcdHZhciBzdHJpbmdMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHRcdFx0dmFyIHNlYXJjaFN0cmluZyA9IFN0cmluZyhzZWFyY2gpO1xuXHRcdFx0dmFyIHNlYXJjaExlbmd0aCA9IHNlYXJjaFN0cmluZy5sZW5ndGg7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcblx0XHRcdC8vIGBUb0ludGVnZXJgXG5cdFx0XHR2YXIgcG9zID0gcG9zaXRpb24gPyBOdW1iZXIocG9zaXRpb24pIDogMDtcblx0XHRcdGlmIChwb3MgIT0gcG9zKSB7IC8vIGJldHRlciBgaXNOYU5gXG5cdFx0XHRcdHBvcyA9IDA7XG5cdFx0XHR9XG5cdFx0XHR2YXIgc3RhcnQgPSBNYXRoLm1pbihNYXRoLm1heChwb3MsIDApLCBzdHJpbmdMZW5ndGgpO1xuXHRcdFx0Ly8gQXZvaWQgdGhlIGBpbmRleE9mYCBjYWxsIGlmIG5vIG1hdGNoIGlzIHBvc3NpYmxlXG5cdFx0XHRpZiAoc2VhcmNoTGVuZ3RoICsgc3RhcnQgPiBzdHJpbmdMZW5ndGgpIHtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbChzdHJpbmcsIHNlYXJjaFN0cmluZywgcG9zKSAhPSAtMTtcblx0XHR9O1xuXHRcdGlmIChkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdFx0ZGVmaW5lUHJvcGVydHkoU3RyaW5nLnByb3RvdHlwZSwgJ2luY2x1ZGVzJywge1xuXHRcdFx0XHQndmFsdWUnOiBpbmNsdWRlcyxcblx0XHRcdFx0J2NvbmZpZ3VyYWJsZSc6IHRydWUsXG5cdFx0XHRcdCd3cml0YWJsZSc6IHRydWVcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzID0gaW5jbHVkZXM7XG5cdFx0fVxuXHR9KCkpO1xufVxuIiwiLyohIGh0dHA6Ly9tdGhzLmJlL3N0YXJ0c3dpdGggdjAuMi4wIGJ5IEBtYXRoaWFzICovXG5pZiAoIVN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aCkge1xuXHQoZnVuY3Rpb24oKSB7XG5cdFx0J3VzZSBzdHJpY3QnOyAvLyBuZWVkZWQgdG8gc3VwcG9ydCBgYXBwbHlgL2BjYWxsYCB3aXRoIGB1bmRlZmluZWRgL2BudWxsYFxuXHRcdHZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcblx0XHRcdC8vIElFIDggb25seSBzdXBwb3J0cyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBvbiBET00gZWxlbWVudHNcblx0XHRcdHRyeSB7XG5cdFx0XHRcdHZhciBvYmplY3QgPSB7fTtcblx0XHRcdFx0dmFyICRkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblx0XHRcdFx0dmFyIHJlc3VsdCA9ICRkZWZpbmVQcm9wZXJ0eShvYmplY3QsIG9iamVjdCwgb2JqZWN0KSAmJiAkZGVmaW5lUHJvcGVydHk7XG5cdFx0XHR9IGNhdGNoKGVycm9yKSB7fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9KCkpO1xuXHRcdHZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXHRcdHZhciBzdGFydHNXaXRoID0gZnVuY3Rpb24oc2VhcmNoKSB7XG5cdFx0XHRpZiAodGhpcyA9PSBudWxsKSB7XG5cdFx0XHRcdHRocm93IFR5cGVFcnJvcigpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcblx0XHRcdGlmIChzZWFyY2ggJiYgdG9TdHJpbmcuY2FsbChzZWFyY2gpID09ICdbb2JqZWN0IFJlZ0V4cF0nKSB7XG5cdFx0XHRcdHRocm93IFR5cGVFcnJvcigpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHN0cmluZ0xlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG5cdFx0XHR2YXIgc2VhcmNoU3RyaW5nID0gU3RyaW5nKHNlYXJjaCk7XG5cdFx0XHR2YXIgc2VhcmNoTGVuZ3RoID0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcblx0XHRcdHZhciBwb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuXHRcdFx0Ly8gYFRvSW50ZWdlcmBcblx0XHRcdHZhciBwb3MgPSBwb3NpdGlvbiA/IE51bWJlcihwb3NpdGlvbikgOiAwO1xuXHRcdFx0aWYgKHBvcyAhPSBwb3MpIHsgLy8gYmV0dGVyIGBpc05hTmBcblx0XHRcdFx0cG9zID0gMDtcblx0XHRcdH1cblx0XHRcdHZhciBzdGFydCA9IE1hdGgubWluKE1hdGgubWF4KHBvcywgMCksIHN0cmluZ0xlbmd0aCk7XG5cdFx0XHQvLyBBdm9pZCB0aGUgYGluZGV4T2ZgIGNhbGwgaWYgbm8gbWF0Y2ggaXMgcG9zc2libGVcblx0XHRcdGlmIChzZWFyY2hMZW5ndGggKyBzdGFydCA+IHN0cmluZ0xlbmd0aCkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgaW5kZXggPSAtMTtcblx0XHRcdHdoaWxlICgrK2luZGV4IDwgc2VhcmNoTGVuZ3RoKSB7XG5cdFx0XHRcdGlmIChzdHJpbmcuY2hhckNvZGVBdChzdGFydCArIGluZGV4KSAhPSBzZWFyY2hTdHJpbmcuY2hhckNvZGVBdChpbmRleCkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH07XG5cdFx0aWYgKGRlZmluZVByb3BlcnR5KSB7XG5cdFx0XHRkZWZpbmVQcm9wZXJ0eShTdHJpbmcucHJvdG90eXBlLCAnc3RhcnRzV2l0aCcsIHtcblx0XHRcdFx0J3ZhbHVlJzogc3RhcnRzV2l0aCxcblx0XHRcdFx0J2NvbmZpZ3VyYWJsZSc6IHRydWUsXG5cdFx0XHRcdCd3cml0YWJsZSc6IHRydWVcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGggPSBzdGFydHNXaXRoO1xuXHRcdH1cblx0fSgpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3Qgc3RhdGUgPSB7XG4gICAgaXNNb2JpbGU6IGZhbHNlLFxuICAgIGhhc1RvdWNoOiBmYWxzZSxcbiAgICBwcm9qZWN0czogW11cbn07XG5cbi8vIFNFTEVDVE9SIENPTlNUQU5UU1xuY29uc3Qge1xuICAgIE1BSU5fTkFWLFxuICAgIE1FTlVfTElTVCxcbiAgICBCQU5ORVIsXG4gICAgTE9HT19XUkFQLFxuICAgIFJFU1VMVFNfQ09OVEFJTkVSLFxuICAgIFNFQVJDSF9SRVNVTFRTLFxuICAgIFNFQVJDSF9JQ09OLFxuICAgIENMRUFSX0lDT05cbn0gPSByZXF1aXJlKCcuL3NlbGVjdG9ycycpO1xuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBET00gLyBEaXNwbGF5IGZ1bmN0aW9uc1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5jb25zdCBPYmpfdmFsdWVzID0gcmVxdWlyZSgnb2JqZWN0LnZhbHVlcycpO1xuXG5jb25zdCB7IGZpbmRNYXRjaGVzIH0gPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4vLyBBZGRzIGhpZGRlbiBjbGFzcyB0byBhbGwgY2xhc3NlcyBwYXNzZWQgaW4gYXMgYXJnc1xuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgT2JqX3ZhbHVlcyhhcmd1bWVudHMpLmZvckVhY2goKHRhcmdldCkgPT4ge1xuICAgICAgICAkKHRhcmdldCkuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuICAgIH0pO1xufVxuXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gUmVtb3ZlcyBoaWRkZW4gY2xhc3MgZnJvbSBhbGwgY2xhc3NlcyBwYXNzZWQgaW4gYXMgYXJnc1xuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIHNob3coKSB7XG4gICAgT2JqX3ZhbHVlcyhhcmd1bWVudHMpLmZvckVhY2goKHRhcmdldCkgPT4ge1xuICAgICAgICAkKHRhcmdldCkucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuICAgIH0pO1xufVxuXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gUmVtb3ZlcyBzZWFyY2ggcmVzdWx0cyBhbmQgY2xvc2VzIHJlc3VsdHMgY29udGFpbmVyXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuZnVuY3Rpb24gY2xlYXJSZXN1bHRzKCkge1xuICAgICQoUkVTVUxUU19DT05UQUlORVIpLmFkZChTRUFSQ0hfUkVTVUxUUykucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAkKFJFU1VMVFNfQ09OVEFJTkVSKS5oZWlnaHQoJycpO1xuICAgICQoU0VBUkNIX1JFU1VMVFMpLmh0bWwoJycpO1xufVxuXG5mdW5jdGlvbiBzaG93U2VhcmNoSWNvbigpIHtcbiAgICAvLyBzaG93IHNlYXJjaCBnbGFzc1xuICAgIHNob3coU0VBUkNIX0lDT04pO1xuICAgIC8vIGhpZGUgeCBpY29uXG4gICAgaGlkZShDTEVBUl9JQ09OKTtcbn1cblxuZnVuY3Rpb24gaGlkZVNlYXJjaEljb24oKSB7XG4gICAgLy8gaGlkZSBzZWFyY2ggZ2xhc3NcbiAgICBoaWRlKFNFQVJDSF9JQ09OKTtcbiAgICAvLyBkaXNwbGF5IHggaWNvblxuICAgIHNob3coQ0xFQVJfSUNPTik7IFxufVxuXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gU2VhcmNoZXMgcHJvamVjdCBuYW1lcyBmb3IgbWF0Y2hlcyBhbmQgdXBkYXRlc1xuLy8gdGhlIERPTSB3aXRoIHJlc3VsdHNcbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG5mdW5jdGlvbiBzaG93UmVzdWx0cyhxdWVyeSkgeyAgICBcbiAgICBxdWVyeSA9IHF1ZXJ5LnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIGlmKHF1ZXJ5ID09PSAnJykge1xuICAgICAgICBjbGVhclJlc3VsdHMoKTtcbiAgICAgICAgc2hvd1NlYXJjaEljb24oKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBoaWRlU2VhcmNoSWNvbigpO1xuICAgIGNvbnN0IHsgcHJvamVjdHMgfSA9IHN0YXRlO1xuXG4gICAgbGV0IHBhdGhuYW1lID0gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGxldCBjYXRlZ29yeTtcbiAgICBpZihwYXRobmFtZSA9PT0gJy9wcm9qZWN0cycpIHtcbiAgICAgICAgY2F0ZWdvcnkgPSAnYWxsJztcbiAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcm9vdCA9ICcvcHJvamVjdHMvY2F0ZWdvcmllcy8nO1xuICAgICAgICBjYXRlZ29yeSA9IHBhdGhuYW1lLnNsaWNlKHJvb3QubGVuZ3RoKTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdHMgPSBmaW5kTWF0Y2hlcyhwcm9qZWN0cywgJ25hbWUnLCBxdWVyeSlcbiAgICAgICAgICAgICAgICAgIC5tYXAocmVzdWx0ID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiL3Byb2plY3RzLyR7cmVzdWx0Lm5hbWUucmVwbGFjZSgvIC9nLCAnLScpfT9jYXRlZ29yeT0ke2NhdGVnb3J5fVwiPiR7cmVzdWx0Lm5hbWV9PC9hPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgYDtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAkKFJFU1VMVFNfQ09OVEFJTkVSKS5hZGQoU0VBUkNIX1JFU1VMVFMpLmFkZENsYXNzKCdvcGVuJyk7XG4gICAgJCgnLmNhdGVnb3J5LWJ0bicpLnJlbW92ZUNsYXNzKCdvcGVuJyk7IC8vIHJlc2V0cyBjYXRlZ29yeSBhcnJvd1xuICAgICQoJy5jYXRlZ29yeS1vcHRpb25zJykuYWRkQ2xhc3MoJ2ZhZGVPdXQnKTtcbiAgICBcbiAgICBsZXQgbGVuID0gcmVzdWx0cy5sZW5ndGg7XG4gICAgaWYobGVuID4gMCkge1xuICAgICAgICAvLyBBdCBsZWFzdCBvbmUgbWF0Y2ggZm91bmRcbiAgICAgICAgJChTRUFSQ0hfUkVTVUxUUykuaHRtbChyZXN1bHRzLmpvaW4oJycpKTtcbiAgICAgICAgJChSRVNVTFRTX0NPTlRBSU5FUikuY3NzKHtoZWlnaHQ6IGAke2xlbiAqIDM2ICsgNDV9cHhgfSk7XG4gICAgICAgIC8vICQoUkVTVUxUU19DT05UQUlORVIpLmhlaWdodChgJHtsZW4gKiA0NX1weGApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIE5vIG1hdGNoZXMsIHNob3cgbm8gbWF0Y2ggbWVzc2FnZVxuICAgICQoUkVTVUxUU19DT05UQUlORVIpLmNzcyh7aGVpZ2h0OiAnJ30pO1xuICAgICQoU0VBUkNIX1JFU1VMVFMpLmh0bWwoJzxwIGNsYXNzPVwibm8tbWF0Y2gtbXNnXCI+U29ycnksIG5vIG1hdGNoZXMgZm91bmQuPC9wPicpO1xufVxuXG5cblxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBBUEkgY2FsbHNcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gZ2V0QWxsUHJvamVjdHMoKSB7XG4gICAgJC5hamF4KHtcbiAgICAgICAgdXJsOiAnL2FwaS9wcm9qZWN0cy9hbGwnLFxuICAgICAgICB0eXBlOiAnR0VUJyxcbiAgICAgICAgZGF0YVR5cGU6ICdqc29uJyxcbiAgICAgICAgc3VjY2VzczogcmVzID0+IHtcbiAgICAgICAgICAgIHN0YXRlLnByb2plY3RzID0gcmVzLnByb2plY3RzO1xuICAgICAgICAgICAgY29uc29sZS5sb2coc3RhdGUucHJvamVjdHMpO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnIpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVXRpbGl0eSBmdW5jdGlvbnNcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuY29uc3QgeyBcbiAgICBmaXhCYW5uZXIsIFxuICAgIGV4cGFuZE5hdixcbiAgICBzaHJpbmtOYXYsIFxuICAgIHRvZ2dsZUhlYWRlckJnSW1nLFxuICAgIHNldEJnSW1nSGVpZ2h0LFxuICAgIGZhZGVPdXRMb2FkU2NyZWVuLFxuICAgIGhpZ2hsaWdodFByb2plY3RDYXJkXG59ID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5cblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbi8vIEdpdmVzIGEgc21vb3RoIGFuaW1hdGlvbiB0byBwYWdlIG5hdmlnYXRpb24gYnJpbmdpbmcgdGhlIFxuLy8gdGFyZ2V0IGVsZW1lbnQgdG8gdGhlIHRvcCBvZiB0aGUgd2luZG93XG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuZnVuY3Rpb24gc21vb3RoU2Nyb2xsKHRhcmdldCwgZHVyYXRpb24gPSAxMjAwLCBvZmZzZXQgPSAwKSB7XG4gICAgJCgnYm9keSwgaHRtbCcpLmFuaW1hdGUoe1xuICAgICAgICBzY3JvbGxUb3A6ICQodGFyZ2V0KS5vZmZzZXQoKS50b3AgLSBvZmZzZXRcbiAgICB9LCBkdXJhdGlvbik7XG59XG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4vLyBGaXJlcyBvbiB1c2VyIHNjcm9sbCBldmVudFxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIGNoZWNrU2Nyb2xsUG9zKCkge1xuICAgICQod2luZG93KS5zY3JvbGwoZSA9PiB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBsb2NhdGlvbi5wYXRobmFtZTtcbiAgICAgICAgaWYocGF0aCA9PT0gJy8nKSB7XG4gICAgICAgICAgICB0b2dnbGVIZWFkZXJCZ0ltZygpO1xuICAgICAgICAgICAgZml4QmFubmVyKCk7XG4gICAgICAgIH0gZWxzZSBpZihwYXRoLmluY2x1ZGVzKCcvcHJvamVjdHMvJykpIHtcbiAgICAgICAgICAgIGhpZ2hsaWdodFByb2plY3RDYXJkKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gQ2hlY2sgc2NyZWVuIHNpemUgdG8gZGV0ZXJtaW5lIE1vYmlsZSBWcy4gRGVza3RvcFxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIGNoZWNrU2l6ZUhhbmRsZXIoKSB7XG4gICAgY2hlY2tTaXplKCk7XG4gICAgJCh3aW5kb3cpLnJlc2l6ZShjaGVja1NpemUpOyBcbn1cblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbi8vIENhbGxlZCBieSBjaGVja1NpemVIYW5kbGVyIHRvIHNldCBzdGF0ZSBpZiBtb2JpbGUgdmlld1xuLy8gb3Igbm90IChQb3J0cmFpdCB2aWV3KVxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIGNoZWNrU2l6ZSgpIHtcbiAgICBsZXQgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBzdGF0ZS5pc01vYmlsZSA9IHdpZHRoIDw9IDQxNDtcbiAgICAvLyBpZiBkZXZpY2UgaGFzIHRvdWNoLCBmaXggYmcgaW1nIGhlaWdodCB0byBhdm9pZCBwYWdlIGp1bXBcbiAgICBzdGF0ZS5oYXNUb3VjaCA/IHNldEJnSW1nSGVpZ2h0KCkgOiBudWxsO1xuICAgIGlmKHdpZHRoIDwgMTA2MCkge1xuICAgICAgICAvLyByZW1vdmUgei1pbmRleCBvbiBoZWFkZXIgZm9yIGNvbGxhcHNlIG5hdiB2aWV3cyAoPDEwNjBweClcbiAgICAgICAgJCgnaGVhZGVyJykuY3NzKCd6LWluZGV4JywgJycpO1xuICAgIH0gXG4gICAgaWYod2lkdGggPj0gMTA2MCkge1xuICAgICAgICAkKCdodG1sJykucmVtb3ZlQ2xhc3MoJ25vLXNjcm9sbCcpO1xuICAgIH1cbiAgICBmaXhCYW5uZXIoKTtcbn1cblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbi8vIENoZWNrcyBpZiBhIHVzZXIgaGFzIHRvdWNoZWQgdGhlaXIgZGV2aWNlIGFuZFxuLy8gYXBwbGllcyBjbGFzcyB0byBib2R5IGFuZCBnbG9iYWwgdmFyIGluZGljYXRpbmcgd2hldGhlclxuLy8gdXNlciBoYXMgdG91Y2hlZCAvIGNhbiB0b3VjaC4gXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuZnVuY3Rpb24gY2hlY2tGb3JUb3VjaCgpIHtcbiAgICBpZigkKCdodG1sJykuaGFzQ2xhc3MoJ3RvdWNoJykpIHtcbiAgICAgICAgc3RhdGUuaGFzVG91Y2ggPSB0cnVlO1xuICAgICAgICBzZXRCZ0ltZ0hlaWdodCgpO1xuICAgIH1cbn1cblxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBFdmVudCBMaXN0ZW5lcnNcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gYnVyZ2VyQ2xpY2soKSB7XG4gICAgJCgnLmJ1cmdlci1idG4nKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IGJ1cmdlciA9IGAuYnVyZ2VyLWJ0biwgLmJ1cmdlci1pY29uLCAke01BSU5fTkFWfSwgJHtNRU5VX0xJU1R9YDtcbiAgICAgICAgJChidXJnZXIpLnRvZ2dsZUNsYXNzKCdvcGVuJyk7XG4gICAgICAgIGlmKCQoJ2h0bWwnKS5oYXNDbGFzcygnbm8tc2Nyb2xsJykpIHtcbiAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5yZW1vdmVDbGFzcygnbm8tc2Nyb2xsJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBhbGxvd3MgbWVudSB0byBjb3ZlciBwYWdlIGJlZm9yZSBzY3JvbGwgYmFyIFxuICAgICAgICAgICAgICAgIC8vIGRpc3NhcHBlYXJhbmNlIGNhdXNlcyBvYnZpb3VzIHBhZ2UganVtcCBcbiAgICAgICAgICAgICAgICAkKCdodG1sLCBib2R5JykuYWRkQ2xhc3MoJ25vLXNjcm9sbCcpOyBcbiAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLy8gLSAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLVxuLy8gUHJvamVjdCBDYXRlZ29yeSBNZW51XG4vLyAtIC0gLSAtIC0gLSAtIC0gLSAtIC0gLSAtXG5mdW5jdGlvbiBmb3JtU3VibWl0UHJldmVudCgpIHtcbiAgICAkKCcuY2F0ZWdvcnktZm9ybScpLm9uKCdzdWJtaXQnLCBlID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBjYXRlZ29yeUJ0bkNsaWNrKCkge1xuICAgICQoJy5jYXRlZ29yeS1idG4nKS5vbignY2xpY2snLCBlID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAkKCcuY2F0ZWdvcnktb3B0aW9ucycpLnJlbW92ZUNsYXNzKCdmYWRlT3V0Jyk7XG4gICAgICAgICQoUkVTVUxUU19DT05UQUlORVIpLmhlaWdodCgnJyk7XG4gICAgICAgIGlmKCQoU0VBUkNIX1JFU1VMVFMpLmhhc0NsYXNzKCdvcGVuJykpIHtcbiAgICAgICAgICAgICQoU0VBUkNIX1JFU1VMVFMpLnJlbW92ZUNsYXNzKCdvcGVuJyk7XG4gICAgICAgICAgICAkKCcuZm9ybS1yZXN1bHRzLWNvbnRhaW5lciwgLmNhdGVnb3J5LWJ0bicpLmFkZENsYXNzKCdvcGVuJyk7XG4gICAgICAgIH0gZWxzZSB7ICAgIFxuICAgICAgICAgICAgJCgnLmZvcm0tcmVzdWx0cy1jb250YWluZXIsIC5jYXRlZ29yeS1idG4nKS50b2dnbGVDbGFzcygnb3BlbicpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHNlYXJjaEJhckNoYW5nZSgpIHtcbiAgICAkKCcuc2VhcmNoLWJhcicpLm9uKCdpbnB1dCcsIGUgPT4ge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNob3dSZXN1bHRzKGUudGFyZ2V0LnZhbHVlKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJJY29uQ2xpY2soKSB7XG4gICAgJChDTEVBUl9JQ09OKS5vbignY2xpY2snLCBlID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBjbGVhclJlc3VsdHMoKTtcbiAgICAgICAgc2hvd1NlYXJjaEljb24oKTtcbiAgICAgICAgJCgnLnNlYXJjaC1iYXInKS52YWwoJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZm9jdXMoKTtcbiAgICB9KTtcbn1cblxuLy8gLSAtIC0gLSAtIC0gLSAtIC0gLVxuLy8gUHJvamVjdCBEZXRhaWwgUGFnZVxuLy8gLSAtIC0gLSAtIC0gLSAtIC0gLVxuZnVuY3Rpb24gYmFja0J0bkNsaWNrKCkge1xuICAgICQoJy5iYWNrLWJ0bi1hbmNob3InKS5vbignY2xpY2snLCBmdW5jdGlvbihlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGV0IGNhdGVnb3J5ID0gJCh0aGlzKS5kYXRhKCdjYXRlZ29yeScpO1xuICAgICAgICBsb2NhdGlvbi5ocmVmID0gYC9wcm9qZWN0cy8ke2NhdGVnb3J5fWA7XG4gICAgfSk7XG59XG5cbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIEV2ZW50IExpc3RlbmVyIEdyb3Vwc1xuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5mdW5jdGlvbiBuYXZDbGlja3MoKSB7XG4gICAgYnVyZ2VyQ2xpY2soKTtcbn1cblxuZnVuY3Rpb24gY2F0ZWdvcnlGb3JtKCkge1xuICAgIGZvcm1TdWJtaXRQcmV2ZW50KCk7XG4gICAgY2F0ZWdvcnlCdG5DbGljaygpO1xuICAgIHNlYXJjaEJhckNoYW5nZSgpO1xuICAgIGNsZWFySWNvbkNsaWNrKCk7XG59XG5cbmZ1bmN0aW9uIHByb2plY3REZXRhaWxFdmVudHMoKSB7XG4gICAgYmFja0J0bkNsaWNrKCk7XG59XG5cblxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuLy8gVXRpbGl0eSBhbmQgSW5pdGlhbGl6YXRpb24gaGFuZGxlcnNcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNvbnN0IHsgc3RhcnRTbGlkZVNob3cgfSA9IHJlcXVpcmUoJy4vc2xpZGVzaG93Jyk7XG5jb25zdCB7IGluaXRNYXAgfSA9IHJlcXVpcmUoJy4vZ29vZ2xlLW1hcHMnKTtcblxuZnVuY3Rpb24gdXRpbHMoKSB7XG4gICAgY2hlY2tTaXplSGFuZGxlcigpOyAvLyBjaGVja3Mgd2lkdGggb24gcmVzaXplXG4gICAgY2hlY2tTY3JvbGxQb3MoKTsgICAvLyBnZXRzIHVzZXIgc2Nyb2xsIHktcG9zIHRvIGFuaW1hdGUgYmFubmVyIG5hdlxuICAgIGNoZWNrRm9yVG91Y2goKTsgICAgLy8gY2hlY2tzIGlmIHVzZXIgaGFzIHRvdWNoIGRldmljZSBieSBkZXRlY3RpbmcgZmlyc3QgdG91Y2ggb24gc2NyZWVuXG4gICAgXG4gICAgLy8gRVM2IFBvbHlmaWxsc1xuICAgIHJlcXVpcmUoJ3N0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMnKTtcbiAgICByZXF1aXJlKCdzdHJpbmcucHJvdG90eXBlLnN0YXJ0c3dpdGgnKTsgXG59XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3QgcGF0aCA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGlmKHBhdGggPT09ICcvJykge1xuICAgICAgICB0b2dnbGVIZWFkZXJCZ0ltZygpO1xuICAgICAgICBmaXhCYW5uZXIoKTtcbiAgICB9IGVsc2UgaWYgKHBhdGggPT09ICcvY29udGFjdC11cycpIHtcbiAgICAgICAgaW5pdE1hcCgpO1xuICAgIH1cbiAgICBmYWRlT3V0TG9hZFNjcmVlbigpO1xuICAgIHN0YXJ0U2xpZGVTaG93KDQwMDApOyAvLyBzdGFydHMgYmcgaW1hZ2Ugc2xpZGVzaG93XG4gICAgZ2V0QWxsUHJvamVjdHMoKTtcbn1cblxuXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4vLyBFbnRyeSBwb2ludCAtLSBNYWluXG4vLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jb25zdCB7IFxuICAgIGRpc3BsYXlQcm9qZWN0U2xpZGVyLCBcbiAgICBkaXNwbGF5TW9kZWxTbGlkZXIsIFxuICAgIHJlc3BvbnNpdmVSZXNsaWNrIFxufSA9IHJlcXVpcmUoJy4vc2xpY2staW5pdCcpO1xuXG4vLyBJbml0IHNsaWNrIHNsaWRlciBpZiBvbiBjb3JyZWN0XG5pZigkKCcjcHJvamVjdHMnKS5sZW5ndGggIT09IDApIHtcbiAgICBkaXNwbGF5UHJvamVjdFNsaWRlcigpO1xuICAgIHJlc3BvbnNpdmVSZXNsaWNrKCk7XG59IGVsc2UgaWYgKCQoJy5iaW0tbW9kZWwtcGFnZScpLmxlbmd0aCAhPT0gMCkge1xuICAgIGRpc3BsYXlNb2RlbFNsaWRlcigpO1xuICAgIHJlc3BvbnNpdmVSZXNsaWNrKCk7XG59XG5cbi8vIG9uIExvYWRcbiQoZnVuY3Rpb24gKCkge1xuICAgIHV0aWxzKCk7XG4gICAgbmF2Q2xpY2tzKCk7XG4gICAgY2F0ZWdvcnlGb3JtKCk7XG4gICAgcHJvamVjdERldGFpbEV2ZW50cygpO1xuICAgIGluaXQoKTtcbn0pO1xuXG4vLyAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpIHtcbi8vICAgICAvLyBleGVjdXRlcyB3aGVuIEhUTUwtRG9jdW1lbnQgaXMgbG9hZGVkIGFuZCBET00gaXMgcmVhZHlcbi8vICAgICBhbGVydChcImRvY3VtZW50IGlzIHJlYWR5XCIpO1xuLy8gfSk7XG4gICBcbiAgIFxuLy8gJCh3aW5kb3cpLm9uKCdsb2FkJywgKGZ1bmN0aW9uKCkge1xuLy8gICAgIC8vIGV4ZWN1dGVzIHdoZW4gY29tcGxldGUgcGFnZSBpcyBmdWxseSBsb2FkZWQsIGluY2x1ZGluZyBhbGwgZnJhbWVzLCBvYmplY3RzIGFuZCBpbWFnZXNcbi8vICAgICBhbGVydChcIndpbmRvdyBpcyBsb2FkZWRcIik7XG4vLyB9KSk7XG5cbiIsIi8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vXG4vL1xuLy8gICAgICBHb29nbGUgTWFwc1xuLy9cbi8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vXG5cbid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyB1bHVydSwgR09PR0xFX01BUFNfQVBJX0tFWSB9ID0gcmVxdWlyZSgnLi4vLi4vLi4vY29uZmlnJyk7XG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4vLyBJbml0IG1hcCBcbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG5leHBvcnRzLmluaXRNYXAgPSAoKSA9PiB7XG4gICAgbGV0IG1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XG4gICAgICAgIHpvb206IDE2LFxuICAgICAgICBjZW50ZXI6IHVsdXJ1LFxuICAgICAgICBzdHlsZXM6IG15TWFwU3R5bGVzXG4gICAgICB9KTtcblxuICAgIC8vIGxldCB4ID0gd2luZG93LmlubmVyV2lkdGggPj0gNjAwID8gMTAgOiAtMjA7XG4gICAgbGV0IG1hcmtlciA9IG5ldyBNYXJrZXJXaXRoTGFiZWwoe1xuICAgICAgICBwb3NpdGlvbjogdWx1cnUsXG4gICAgICAgIG1hcDogbWFwLFxuICAgICAgICBsYWJlbENvbnRlbnQ6IFwiQmFja2Jyb29rIE1hc29ucnkgSGVhZHF1YXJ0ZXJzXCIsXG4gICAgICAgIGxhYmVsQW5jaG9yOiBuZXcgZ29vZ2xlLm1hcHMuUG9pbnQoLTMwLCAxMCksXG4gICAgICAgIGxhYmVsQ2xhc3M6IFwiZ29vZ2xlLW1hcHMtYmJtLW1hcmtlclwiLCAvLyB5b3VyIGRlc2lyZWQgQ1NTIGNsYXNzXG4gICAgICAgIGxhYmVsSW5CYWNrZ3JvdW5kOiB0cnVlLFxuICAgICAgICBpY29uOiB7XG4gICAgICAgICAgICBjb2xvcjogXCJyZWRcIixcbiAgICAgICAgICAgIHVybDogJ2Fzc2V0cy9pbWFnZXMvY29tcHJlc3NlZC9maXZlLWJyaWNrcy5wbmcnXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBjZW50ZXI7XG4gICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkRG9tTGlzdGVuZXIobWFwLCAnaWRsZScsICgpID0+IHtcbiAgICAgICAgY2VudGVyID0gbWFwLmdldENlbnRlcigpO1xuICAgIH0pO1xuICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKHdpbmRvdywgJ3Jlc2l6ZScsICgpID0+IHtcbiAgICAgICAgLy8gbGV0IHggPSB3aW5kb3cuaW5uZXJXaWR0aCA+PSA2MDAgPyAxMjAgOiA0MDtcbiAgICAgICAgbWFwLnNldENlbnRlcihjZW50ZXIpO1xuICAgICAgICAvLyBtYXJrZXIuc2V0T3B0aW9ucyh7XG4gICAgICAgIC8vICAgICBsYWJlbEFuY2hvcjogbmV3IGdvb2dsZS5tYXBzLlBvaW50KHgsIC0yMCksXG4gICAgICAgIC8vIH0pO1xuICAgIH0pO1xuXG4gICAgdmFyIGluZm93aW5kb3cgPSBuZXcgZ29vZ2xlLm1hcHMuSW5mb1dpbmRvdygpO1xuICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZERvbUxpc3RlbmVyKG1hcmtlciwgJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpbmZvd2luZG93LnNldENvbnRlbnQoJzxkaXY+QmFja2Jyb29rIE1hc29ucnkgSGVhZHF1YXJ0ZXJzPC9kaXY+Jyk7XG4gICAgICAgIGluZm93aW5kb3cub3BlbihtYXAsIHRoaXMpO1xuICAgIH0pO1xufVxuXG5sZXQgbXlNYXBTdHlsZXMgPSBbXG4gICAge1xuICAgICAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIixcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiI2ViZTNjZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiIzUyMzczNVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LnN0cm9rZVwiLFxuICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZjVmMWU2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmVcIixcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLFxuICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjYzliMmE2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUubGFuZF9wYXJjZWxcIixcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5LnN0cm9rZVwiLFxuICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZGNkMmJlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwiYWRtaW5pc3RyYXRpdmUubGFuZF9wYXJjZWxcIixcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiI2FlOWU5MFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcImxhbmRzY2FwZS5uYXR1cmFsXCIsXG4gICAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZGZkMmFlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsXG4gICAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZGZkMmFlXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwicG9pXCIsXG4gICAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXG4gICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIiM5MzgxN2NcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJwb2kucGFya1wiLFxuICAgICAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLFxuICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjYTViMDc2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwicG9pLnBhcmtcIixcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiIzQ0NzUzMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInJvYWRcIixcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXG4gICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIiNmNWYxZTZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmFydGVyaWFsXCIsXG4gICAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZmRmY2Y4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsXG4gICAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeVwiLFxuICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjZjhjOTY3XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwicm9hZC5oaWdod2F5XCIsXG4gICAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJnZW9tZXRyeS5zdHJva2VcIixcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiI2U5YmM2MlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheS5jb250cm9sbGVkX2FjY2Vzc1wiLFxuICAgICAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnlcIixcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiI2U5OGQ1OFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInJvYWQuaGlnaHdheS5jb250cm9sbGVkX2FjY2Vzc1wiLFxuICAgICAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuc3Ryb2tlXCIsXG4gICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIiNkYjg1NTVcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJyb2FkLmxvY2FsXCIsXG4gICAgICAgIFwiZWxlbWVudFR5cGVcIjogXCJsYWJlbHMudGV4dC5maWxsXCIsXG4gICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIiM4MDZiNjNcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LmxpbmVcIixcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXG4gICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIiNkZmQyYWVcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LmxpbmVcIixcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiIzhmN2Q3N1wiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJmZWF0dXJlVHlwZVwiOiBcInRyYW5zaXQubGluZVwiLFxuICAgICAgICBcImVsZW1lbnRUeXBlXCI6IFwibGFiZWxzLnRleHQuc3Ryb2tlXCIsXG4gICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIiNlYmUzY2RcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJ0cmFuc2l0LnN0YXRpb25cIixcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImdlb21ldHJ5XCIsXG4gICAgICAgIFwic3R5bGVyc1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJjb2xvclwiOiBcIiNkZmQyYWVcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwiZmVhdHVyZVR5cGVcIjogXCJ3YXRlclwiLFxuICAgICAgICBcImVsZW1lbnRUeXBlXCI6IFwiZ2VvbWV0cnkuZmlsbFwiLFxuICAgICAgICBcInN0eWxlcnNcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiY29sb3JcIjogXCIjYjlkM2MyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBcImZlYXR1cmVUeXBlXCI6IFwid2F0ZXJcIixcbiAgICAgICAgXCJlbGVtZW50VHlwZVwiOiBcImxhYmVscy50ZXh0LmZpbGxcIixcbiAgICAgICAgXCJzdHlsZXJzXCI6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImNvbG9yXCI6IFwiIzkyOTk4ZFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9XG5dOyIsIi8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vIC8vXG4vL1xuLy8gICAgICBTRUxFQ1RPUiBDT05TVEFOVFNcbi8vXG4vLyAvLyAvLyAvLyAvLyAvLyAvLyAvLyAvLyAvL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBNQUlOX05BVjogJy5tYWluLW5hdicsXG4gICAgTUVOVV9MSVNUOiAnLm1lbnUtbGlzdCcsXG4gICAgQkFOTkVSOiAnLmJhbm5lcicsXG4gICAgTE9HT19XUkFQOiAnLmxvZ28tYS13cmFwJyxcbiAgICBUUk9XRUxfSUNPTjogJy5pY29uLXRyb3dlbC1vdXRsaW5lJyxcbiAgICBSRVNVTFRTX0NPTlRBSU5FUjogJy5mb3JtLXJlc3VsdHMtY29udGFpbmVyJyxcbiAgICBTRUFSQ0hfUkVTVUxUUzogJy5zZWFyY2gtcmVzdWx0cycsXG4gICAgU0VBUkNIX0lDT046ICcuaWNvbi1zZWFyY2gtaWNvbicsXG4gICAgQ0xFQVJfSUNPTjogJy5pY29uLWNsZWFyLWljb24nXG59O1xuIiwiLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbi8vIFNsaWNrIENhcm91c2VsXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBTRUxFQ1RPUiBDT05TVEFOVFNcbmNvbnN0IFBST0pFQ1RfU0xJREVSID0gJy5wcm9qZWN0LXNsaWRlcic7XG5jb25zdCBNT0RFTF9TTElERVIgICA9ICcubW9kZWwtc2xpZGVyJztcblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiBcbi8vIFByb2plY3QgUGFnZSBTbGlkZXJcbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogXG5jb25zdCBpbml0UHJvamVjdFNsaWRlciA9ICgpID0+IHtcbiAgICAkKFBST0pFQ1RfU0xJREVSKS5zbGljayh7XG4gICAgICAgIGRvdHM6IGZhbHNlLFxuICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgIG5leHRBcnJvdzogJzxzdmcgY2xhc3M9XCJpY29uIGljb24tY2hldnJvbi1yaWdodFwiPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uLWNoZXZyb24tcmlnaHRcIj48L3VzZT48L3N2Zz4nLFxuICAgICAgICBwcmV2QXJyb3c6ICc8c3ZnIGNsYXNzPVwiaWNvbiBpY29uLWNoZXZyb24tbGVmdFwiPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uLWNoZXZyb24tbGVmdFwiPjwvdXNlPjwvc3ZnPicsXG4gICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgc3BlZWQ6IDEyMDAsXG4gICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDEsXG4gICAgICAgIHZhcmlhYmxlV2lkdGg6IHRydWUsXG4gICAgICAgIHJlc3BvbnNpdmU6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA1MTUsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDEyMDAsXG4gICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9KTtcbiAgICAvLyBjaGVjayBpZiB1c2VyIGhhcyBzZWVuIHRoaXMgaW4gc2Vzc2lvblN0b3JhZ2VcbiAgICAvLyAgIGlmIHllcywgcmVtb3ZlICQoJy5pY29uLXN3aXBlLWljb24nKVxuICAgIC8vIHVwZGF0ZSBzZXNzaW9uU3RvcmFnZSB0aGF0IHVzZXIgaGFzIHNlZW4gaXRcbiAgICBsZXQgdmlzaXN0ZWQgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCd2aXNpdGVkJyk7XG4gICAgaWYodmlzaXN0ZWQpIHtcbiAgICAgICAgJCgnLmljb24tc3dpcGUtaWNvbicpLnJlbW92ZSgpO1xuICAgIH1cbiAgICAkKFBST0pFQ1RfU0xJREVSKS5vbignYWZ0ZXJDaGFuZ2UnLCAoZSwgc2xpY2ssIGN1cnJlbnRTbGlkZSkgPT4ge1xuICAgICAgICAkKCcuaWNvbi1zd2lwZS1pY29uJykuYWRkQ2xhc3MoJ2ZhZGVPdXQnKTtcbiAgICAgICAgaWYoIXZpc2lzdGVkKSB7XG4gICAgICAgICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCd2aXNpdGVkJywgJ3RydWUnKTtcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmNvbnN0IHNjcm9sbEJhcldpZHRoID0gcmVxdWlyZSgnLi91dGlscycpLmdldFNjcm9sbGJhcldpZHRoKCk7XG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogXG4vLyBNb2RlbCBQYWdlIFNsaWRlclxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiBcbmNvbnN0IGluaXRNb2RlbFNsaWRlciA9ICgpID0+IHtcbiAgICAkKE1PREVMX1NMSURFUikuc2xpY2soe1xuICAgICAgICBkb3RzOiB0cnVlLFxuICAgICAgICBhcnJvd3M6IHRydWUsXG4gICAgICAgIG5leHRBcnJvdzogJzxzdmcgY2xhc3M9XCJpY29uIGljb24tY2hldnJvbi1yaWdodFwiPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uLWNoZXZyb24tcmlnaHRcIj48L3VzZT48L3N2Zz4nLFxuICAgICAgICBwcmV2QXJyb3c6ICc8c3ZnIGNsYXNzPVwiaWNvbiBpY29uLWNoZXZyb24tbGVmdFwiPjx1c2UgeGxpbms6aHJlZj1cIiNpY29uLWNoZXZyb24tbGVmdFwiPjwvdXNlPjwvc3ZnPicsXG4gICAgICAgIGluZmluaXRlOiBmYWxzZSxcbiAgICAgICAgc3BlZWQ6IDEyMDAsXG4gICAgICAgIHZhcmlhYmxlV2lkdGg6IHRydWUsXG4gICAgICAgIGNlbnRlck1vZGU6IHRydWUsXG4gICAgICAgIGluaXRpYWxTbGlkZTogMSxcbiAgICAgICAgcmVzcG9uc2l2ZTogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGJyZWFrcG9pbnQ6IDEyMDAsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFNsaWRlOiAwXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBicmVha3BvaW50OiA3MzcsXG4gICAgICAgICAgICAgICAgc2V0dGluZ3M6IHtcbiAgICAgICAgICAgICAgICAgICAgc3BlZWQ6IDEyMDAsXG4gICAgICAgICAgICAgICAgICAgIGFycm93czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlc1RvU2hvdzogMSxcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVzVG9TY3JvbGw6IDFcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9KTtcbiAgICBpZih3aW5kb3cuaW5uZXJXaWR0aCA8IDczNykge1xuICAgICAgICAkKCcubW9kZWwtc2xpZGUnKS5jc3Moeyd3aWR0aCc6ICdjYWxjKDEwMHZ3IC0gJyArIHNjcm9sbEJhcldpZHRoICsgJ3B4KSd9KTtcbiAgICB9XG59XG5cblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiBcbi8vIEludGlhbGl6ZXMgc2xpZGVyIGFuZCBzZXRzIGhlaWdodCB0byB6ZXJvXG4vLyBiZWZvcmUgYW5kIHVuc2V0cyBoZWlnaHQgYWZ0ZXIgaXQgaXMgJ3NsaWNrZWQnXG4vLyB0byBhdm9pZCBGT1VDXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqIFxuY29uc3QgZGlzcGxheVByb2plY3RTbGlkZXIgPSAoKSA9PiB7XG4gICAgJChQUk9KRUNUX1NMSURFUikuY3NzKCdoZWlnaHQnLCAnMHB4Jyk7XG4gICAgaW5pdFByb2plY3RTbGlkZXIoKTtcbiAgICAkKFBST0pFQ1RfU0xJREVSKS5jc3MoJ2hlaWdodCcsICcnKTtcbn1cbmNvbnN0IGRpc3BsYXlNb2RlbFNsaWRlciA9ICgpID0+IHtcbiAgICAkKE1PREVMX1NMSURFUikuY3NzKCdoZWlnaHQnLCAnMHB4Jyk7XG4gICAgaW5pdE1vZGVsU2xpZGVyKCk7XG4gICAgJChNT0RFTF9TTElERVIpLmNzcygnaGVpZ2h0JywgJycpO1xufVxuXG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogXG4vLyAgICAgICAgICBEZXN0cm95cyBzbGljayBjYXJvdXNlbHNcbi8vIEBwYXJhbXMgICBTbGlkZXIgZWxlbWVudCB0byBiZSBkZXN0cm95ZWRcbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogXG5jb25zdCB1bnNsaWNrID0gKHNsaWRlcikgPT4ge1xuICAgIGlmICgkKHNsaWRlcikuaGFzQ2xhc3MoJ3NsaWNrLWluaXRpYWxpemVkJykpIHtcbiAgICAgICAgJChzbGlkZXIpLnNsaWNrKCd1bnNsaWNrJyk7XG4gICAgfVxufVxuXG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogXG4vLyAgVXNlZCB0byByZXNsaWNrIHNsaWRlcnMgb24gd2luZG93IHJlc2l6ZSBcbi8vICBpbmNjcmVhc2UuIFxuLy8gIFNsaWNrIHNldHRpbmdzIGhhbmRsZXMgdW5zbGljayBmb3IgbW9iaWxlIFxuLy8gIGJ1dCBkb2VzIG5vdCByZXNsaWNrIHdoZW4gd2luZG93IHNpemUgaW5jcmVhc2VzXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqIFxuY29uc3QgcmVzcG9uc2l2ZVJlc2xpY2sgPSAoKSA9PiB7XG4gICAgJCh3aW5kb3cpLnJlc2l6ZSgoKSA9PiB7XG4gICAgICAgIGxldCB3aWR0aCA9IHBhcnNlSW50KCQoJ2JvZHknKS5jc3MoJ3dpZHRoJykpO1xuICAgICAgICBpZiAoISQoUFJPSkVDVF9TTElERVIpLmhhc0NsYXNzKCdzbGljay1pbml0aWFsaXplZCcpKSB7XG4gICAgICAgICAgICBpbml0UHJvamVjdFNsaWRlcigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghJChNT0RFTF9TTElERVIpLmhhc0NsYXNzKCdzbGljay1pbml0aWFsaXplZCcpKSB7XG4gICAgICAgICAgICBpbml0TW9kZWxTbGlkZXIoKTtcbiAgICAgICAgfSBcbiAgICAgICAgaWYod2luZG93LmlubmVyV2lkdGggPCA3MzcpIHtcbiAgICAgICAgICAgICQoJy5tb2RlbC1zbGlkZScpLmNzcyh7J3dpZHRoJzogJ2NhbGMoMTAwdncgLSAnICsgc2Nyb2xsQmFyV2lkdGggKyAncHgpJ30pO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpbml0UHJvamVjdFNsaWRlciwgXG4gICAgaW5pdE1vZGVsU2xpZGVyLFxuICAgIGRpc3BsYXlQcm9qZWN0U2xpZGVyLCBcbiAgICBkaXNwbGF5TW9kZWxTbGlkZXIsIFxuICAgIHVuc2xpY2ssIFxuICAgIHJlc3BvbnNpdmVSZXNsaWNrIFxufTsiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFNMSURFU0hPVyA9ICcuc2xpZGVzaG93JztcbmNvbnN0IFNMSURFID0gJy5zbGlkZSc7XG5cbmZ1bmN0aW9uIG5leHRTbGlkZSgpIHtcbiAgICAvLyBnZXQgY3VycmVudCBzbGlkZSBudW1iZXJcbiAgICAvLyBpbmNyZW1lbnRcbiAgICAvLyBzZXQgY3VycmVudCB0byBuZXcgc2xpZGUgbnVtYmVyXG4gICAgbGV0ICRjdXJyZW50ICA9ICQoJy5zbGlkZS5jdXJyZW50Jyk7XG4gICAgbGV0IHNsaWRlTnVtICA9IHBhcnNlSW50KCRjdXJyZW50LmF0dHIoJ2RhdGEtc2xpZGUtbnVtJykpO1xuICAgIGxldCBuZXh0U2xpZGUgPSBzbGlkZU51bSA8ICQoJy5zbGlkZScpLmxlbmd0aCA/IHNsaWRlTnVtICsgMSA6IDE7XG5cbiAgICAkY3VycmVudC5yZW1vdmVDbGFzcygnY3VycmVudCcpO1xuICAgICQoYC5zbGlkZVtkYXRhLXNsaWRlLW51bT1cIiR7bmV4dFNsaWRlfVwiXWApLmFkZENsYXNzKCdjdXJyZW50Jyk7XG59XG5cbmZ1bmN0aW9uIHN0YXJ0U2xpZGVTaG93KGRlbGF5ID0gNjAwMCkge1xuICAgIHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgbmV4dFNsaWRlKCk7XG4gICAgfSwgZGVsYXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHsgbmV4dFNsaWRlLCBzdGFydFNsaWRlU2hvdyB9O1xuIiwiLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy9cbi8vXG4vLyAgICAgIFV0aWxpdHkgZnVuY3Rpb25zXG4vL1xuLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy8gLy9cblxuLy8gU0VMRUNUT1IgQ09OU1RBTlRTXG5jb25zdCB7XG4gICAgTUFJTl9OQVYsXG4gICAgTUVOVV9MSVNULFxuICAgIEJBTk5FUixcbiAgICBMT0dPX1dSQVAsXG4gICAgVFJPV0VMX0lDT05cbn0gPSByZXF1aXJlKCcuL3NlbGVjdG9ycycpO1xuXG5cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4vLyBjaGVja3MgY3VycmVudCBzY3JvbGxpbmcgcG9zaXRpb24gYW5kIGZpeGVzIGJhbm5lciBpZlxuLy8gdXNlciBzY3JvbGxlZCBkb3duIGJlbG93IGhlYWRlclxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmNvbnN0IGZpeEJhbm5lciA9ICgpID0+IHtcbiAgICAvLyBOZWVkIHRvIGNvbGxhcHNlIG5hdiBpdGVtcyBhbmQgbG9nbyB0byBhIGZpeGVkIGJhbm5lciBhcyBoZWFkZXJcbiAgICAvLyBsZWF2ZXMgdGhlIHdpbmRvd1xuICAgIGxldCB3aW5Ub1RvcERvYyA9ICQod2luZG93KS5zY3JvbGxUb3AoKSxcbiAgICAgICAgbmF2VG9Ub3BEb2MgPSAkKE1BSU5fTkFWKS5vZmZzZXQoKS50b3A7XG4gICAgICAgIFxuICAgIGxldCBuYXZUb1RvcFdpbiA9IG5hdlRvVG9wRG9jIC0gd2luVG9Ub3BEb2M7XG4gICAgaWYobmF2VG9Ub3BXaW4gPD0gNDApIHtcbiAgICAgICAgLy8gbWVudS1uYXYgaXMgaW4gaXRzIHByb3BlciBwb3NpdGlvbiB0byBiZSBmaXhlZFxuICAgICAgICAkKE1BSU5fTkFWKS5hZGRDbGFzcygnZml4ZWQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAkKE1BSU5fTkFWKS5yZW1vdmVDbGFzcygnZml4ZWQnKTtcbiAgICB9XG4gICAgXG4gICAgbGV0IG9mZnNldCA9ICQoJ2hlYWRlcicpLmhlaWdodCgpIC0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xuICAgIC8vIG9mZnNldCBpcyB0aGUgIyBvZiBweCBvZiB0aGUgaGVhZGVyIHRoYXQgaXMgdmlzaWJsZVxuICAgIGlmKG9mZnNldCA8PSAwKSB7XG4gICAgICAgIHNocmlua05hdigpO1xuICAgIH0gZWxzZSBpZihvZmZzZXQgPiAwICYmIHdpbmRvdy5pbm5lcldpZHRoIDw9IDg5OSkge1xuICAgICAgICAkKCdoZWFkZXInKS5yZW1vdmVDbGFzcygnc2hyaW5rJyk7IC8vIGFsbG93cyBmb3IgaGVhZGVyL2Jhbm5lci1iYWNrZHJvcCB0byBzd2l0Y2ggdG8gbWFpbnRhaW4gaW1hZ2Ugb3ZlciBiYWNrZHJvcCBlZmZlY3RcbiAgICB9XG4gICAgaWYob2Zmc2V0ID49IDEwMCkge1xuICAgICAgICBleHBhbmROYXYoKTtcbiAgICB9XG59XG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gRnVsbHkgY29sbGFwc2VzIGJhbm5lciwgbmF2LCAmIGxvZ29cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG5jb25zdCBzaHJpbmtOYXYgPSAoKSA9PiB7XG4gICAgJChNQUlOX05BVikuYWRkKEJBTk5FUilcbiAgICAgICAgICAgICAgIC5hZGQoTUVOVV9MSVNUKVxuICAgICAgICAgICAgICAgLmFkZCgnaGVhZGVyJylcbiAgICAgICAgICAgICAgIC5hZGQoTE9HT19XUkFQKVxuICAgICAgICAgICAgICAgLmFkZENsYXNzKCdzaHJpbmsnKTtcbn1cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG4vLyBGdWxseSBleHBhbmRzIGJhbm5lciwgbmF2LCAmIGxvZ29cbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG5jb25zdCBleHBhbmROYXYgPSAoKSA9PiB7XG4gICAgJChNQUlOX05BVikuYWRkKEJBTk5FUilcbiAgICAgICAgICAgICAgIC5hZGQoTUVOVV9MSVNUKVxuICAgICAgICAgICAgICAgLmFkZCgnaGVhZGVyJylcbiAgICAgICAgICAgICAgIC5hZGQoTE9HT19XUkFQKVxuICAgICAgICAgICAgICAgLnJlbW92ZUNsYXNzKCdzaHJpbmsnKTtcbn1cblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbi8vIEhpZGVzL1Nob3dzIGhlYWRlciBwc3VlZG8tZWwgLS0gcHJldmVudHMgYmcgaW1hZ2UgZnJvbVxuLy8gc2hvd2luZyBiZWxvdyBmb290ZXIgb24gb3ZlcnNjcm9sbHNcbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG5mdW5jdGlvbiB0b2dnbGVIZWFkZXJCZ0ltZygpIHtcbiAgICBsZXQgd2luVG9Ub3AgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCksXG4gICAgICAgIGhlYWRlckh0ID0gJCgnaGVhZGVyJykuaGVpZ2h0KCk7XG4gICAgaWYod2luVG9Ub3AgPiBoZWFkZXJIdCAqIDIpIHtcbiAgICAgICAgJCgnaGVhZGVyJykuYWRkQ2xhc3MoJ3JlbW92ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICQoJ2hlYWRlcicpLnJlbW92ZUNsYXNzKCdyZW1vdmUnKTtcbiAgICB9XG59XG5cblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbi8vIHNldHMgYmFja2dyb3VuZCBpbWFnZSBoZWlnaHQgb24gcGFnZSBsb2FkIHRvIGF2b2lkXG4vLyBpbWFnZSBqdW1wIHdoZW4gbmF2IGJhciBzaG93cy9oaWRlcyBvbiBtb2JpbGVcbi8vICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqXG5jb25zdCBzZXRCZ0ltZ0hlaWdodCA9ICgpID0+IHtcbiAgICAvLyB0cmlnZ2VyIG9uIDEpIGZpcnN0IHRvdWNoXG4gICAgLy8gICAgICAgICAgICAyKSBvbiB3aW5kb3cgcmVzaXplIHdoZW4gc3RhdGUuaGFzVG91Y2ggPT09IHRydWVcbiAgICBsZXQgJGJnID0gJCgnaGVhZGVyJyk7XG4gICAgJGJnLmNzcygnbWF4LWhlaWdodCcsICcnKTsgLy8gY2xlYXIgaGVpZ2h0IHRvIGhhbmRsZSByZXNpemUgYW5kIGdldCBkZWZhdWx0IGhlaWdodFxuICAgIGxldCBoID0gJGJnLmhlaWdodCgpO1xuICAgICRiZy5jc3MoJ21heC1oZWlnaHQnLCBoKTtcbn1cblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbi8vIEZhZGVzIG91dCBsb2FkaW5nIHNjcmVlbiBhbmQgcmVtb3ZlcyBpdCBmcm9tIERPTVxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIGZhZGVPdXRMb2FkU2NyZWVuKCkge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAkKCcubG9hZGluZy1wYWdlLCAubG9hZGluZy1wYWdlIHN2ZycpLmFkZENsYXNzKCdmYWRlLW91dCcpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICQoJ2JvZHknKS5yZW1vdmVDbGFzcygnbm8tc2Nyb2xsJyk7XG4gICAgICAgIH0sIDcwMCk7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgJCgnLmxvYWRpbmctcGFnZScpLnJlbW92ZSgpO1xuICAgICAgICB9LCAyMDAwKTtcbiAgICB9LCA1MDApO1xufVxuXG4vLyAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKlxuLy8gQ2hlY2tzIGlmIHRhcmdldCBleGlzdHMgd2l0aGluIHNwZWNpZmllZCBjb21wYXJlIHN0cmluZ1xuLy8gb2Ygb2JqIGluIGFuIGFycmF5IG9mIG9iamVjdHNcbi8vXG4vLyBAcmV0dXJucyBhbGwgb2JqZWN0cyB3aG9zIGNvbXBhcmUgc3RyaW5nIHByb3BlcnR5XG4vLyAgICAgICAgICBjb250YWlucyB0YXJnZXQgd29yZChzKVxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIGZpbmRNYXRjaGVzKGFyciwgY29tcGFyZVN0ciwgdGFyZ2V0KSB7XG4gICAgbGV0IHJlc3VsdHMgPSBbXTtcbiAgICBmb3IobGV0IG9iaiBvZiBhcnIpIHtcbiAgICAgICAgbGV0IGFkZGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBjdXJyZW50ID0gb2JqW2NvbXBhcmVTdHJdLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgICAgICBpZihjdXJyZW50LnN0YXJ0c1dpdGgodGFyZ2V0KSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2N1cnJlbnQ6ICcsIGN1cnJlbnQsIFwiIHN0YXJ0cyB3aXRoIFwiLCB0YXJnZXQpO1xuICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG9iaik7XG4gICAgICAgICAgICBhZGRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgbm90IGFscmVhZHkgYWRkZWQsIGNoZWNrIGZvciBtYXRjaCB3aXRoaW4gYW55IHdvcmQgaW4gbmFtZVxuICAgICAgICBpZighYWRkZWQpIHtcbiAgICAgICAgICAgIC8vIHNwaXR0aW5nIHVwIG5hbWUgYnkgd29yZHMgYWxsb3dzIGZvciBzZWFyY2ggd2l0aGluIGFueSB3b3JkIGluIG5hbWVcbiAgICAgICAgICAgIGxldCB3b3JkcyAgID0gY3VycmVudC5zcGxpdCgnICcpO1xuICAgICAgICAgICAgbGV0IHRhcmdldHMgPSB0YXJnZXQuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgIC8vIGlmIGFueSB3b3JkcyBzdGFydCB3aXRoIGFueSB0YXJnZXRzLCBtYXRjaFxuICAgICAgICAgICAgZm9yKGxldCBpPTA7IGk8dGFyZ2V0cy5sZW5ndGggJiYgIWFkZGVkOyBpKyspIHtcbiAgICAgICAgICAgICAgICBmb3IobGV0IGo9MDsgajx3b3Jkcy5sZW5ndGggJiYgIWFkZGVkOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYod29yZHNbal0uc3RhcnRzV2l0aCh0YXJnZXRzW2ldKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKG9iaik7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cblxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbi8vIEZvciBzbWFsbCB2aWV3cG9ydHMsIHByb2plY3QgY2FyZCBpbiBtaWRkbGUgb2Ygc2NyZWVuXG4vLyBnZXRzIGFjdGl2ZS9ob3ZlciBzdHlsZXMgYXBwbGllZFxuLy8gKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICogKiAqICpcbmZ1bmN0aW9uIGhpZ2hsaWdodFByb2plY3RDYXJkKCkge1xuICAgIGlmKHdpbmRvdy5pbm5lcldpZHRoID49IDYwMCkge1xuICAgICAgICAkKCcucHJvamVjdC1jYXJkLWFuY2hvcicpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAkKCcucHJvamVjdC1saXN0IGxpJykuZWFjaCgoaSwgZWwpID0+IHtcbiAgICAgICAgbGV0IGVsVG9wID0gJChlbCkub2Zmc2V0KCkudG9wLFxuICAgICAgICAgICAgZWxCb3R0b20gPSBlbFRvcCArICQoZWwpLm91dGVySGVpZ2h0KCksXG4gICAgICAgICAgICBlbE1pZGRsZSA9IChlbFRvcCArIGVsQm90dG9tKSAvIDI7XG5cbiAgICAgICAgbGV0IHdpblRvcCAgICA9ICQod2luZG93KS5zY3JvbGxUb3AoKSxcbiAgICAgICAgICAgIHdpbkJvdHRvbSA9IHdpblRvcCArICQod2luZG93KS5oZWlnaHQoKSxcbiAgICAgICAgICAgIHdpbk1pZGRsZSA9ICh3aW5Ub3AgKyB3aW5Cb3R0b20pIC8gMjtcblxuICAgICAgICBsZXQgdXBwZXJCb3VuZCA9IHdpbk1pZGRsZSAtICQoZWwpLmhlaWdodCgpIC8gMiwgLy8gdXBwZXJCb3VuZCBpcyBsb3dlciBpbiBweCB2YWx1ZVxuICAgICAgICAgICAgbG93ZXJCb3VuZCA9IHdpbk1pZGRsZSArICQoZWwpLmhlaWdodCgpIC8gMjsgLy8gbG93ZXJCb3VuZCBpcyBoaWdoZXIgaW4gcHggdmFsdWVcblxuXG4gICAgICAgIGlmKGVsTWlkZGxlID4gdXBwZXJCb3VuZCAmJiBlbE1pZGRsZSA8IGxvd2VyQm91bmQpIHtcbiAgICAgICAgICAgICQoJy5wcm9qZWN0LWNhcmQtYW5jaG9yJykucmVtb3ZlQ2xhc3MoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgJChlbCkuZmluZCgnLnByb2plY3QtY2FyZC1hbmNob3InKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgICAgICAkKGVsKS5hZGRDbGFzcygnYWN0aXZlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkKGVsKS5maW5kKCcucHJvamVjdC1jYXJkLWFuY2hvcicpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICQoZWwpLnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRTY3JvbGxiYXJXaWR0aCgpIHtcbiAgICB2YXIgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIG91dGVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgIG91dGVyLnN0eWxlLndpZHRoID0gXCIxMDBweFwiO1xuICAgIG91dGVyLnN0eWxlLm1zT3ZlcmZsb3dTdHlsZSA9IFwic2Nyb2xsYmFyXCI7IC8vIG5lZWRlZCBmb3IgV2luSlMgYXBwc1xuXG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdXRlcik7XG5cbiAgICB2YXIgd2lkdGhOb1Njcm9sbCA9IG91dGVyLm9mZnNldFdpZHRoO1xuICAgIC8vIGZvcmNlIHNjcm9sbGJhcnNcbiAgICBvdXRlci5zdHlsZS5vdmVyZmxvdyA9IFwic2Nyb2xsXCI7XG5cbiAgICAvLyBhZGQgaW5uZXJkaXZcbiAgICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGlubmVyLnN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgb3V0ZXIuYXBwZW5kQ2hpbGQoaW5uZXIpOyAgICAgICAgXG5cbiAgICB2YXIgd2lkdGhXaXRoU2Nyb2xsID0gaW5uZXIub2Zmc2V0V2lkdGg7XG5cbiAgICAvLyByZW1vdmUgZGl2c1xuICAgIG91dGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQob3V0ZXIpO1xuXG4gICAgcmV0dXJuIHdpZHRoTm9TY3JvbGwgLSB3aWR0aFdpdGhTY3JvbGw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNocmlua05hdiwgXG4gICAgZXhwYW5kTmF2LFxuICAgIGZpeEJhbm5lcixcbiAgICB0b2dnbGVIZWFkZXJCZ0ltZyxcbiAgICBzZXRCZ0ltZ0hlaWdodCxcbiAgICBmYWRlT3V0TG9hZFNjcmVlbixcbiAgICBmaW5kTWF0Y2hlcyxcbiAgICBoaWdobGlnaHRQcm9qZWN0Q2FyZCxcbiAgICBnZXRTY3JvbGxiYXJXaWR0aFxufTsiXX0=
